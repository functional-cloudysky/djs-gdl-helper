function print(x) {
	console.log(x);
}

function prt(x) {
	process.stdout.write(x);
}

function beep(cnt = 1) {
	for(var i=1; i<=cnt; i++)
		prt("");
}

function shell(c) {
	(require("child_process")).exec(c);
}

function sound(a) {
	shell('beep ' + a);
}

const hangul = require('hangul-js');

const jsnKorean = {
	'a': '„ÖÅ',
	's': '„Ñ¥',
	'd': '„Öá',
	'f': '„Ñπ',
	'g': '„Öé',
	'h': '„Öó',
	'j': '„Öì',
	'k': '„Öè',
	'l': '„Ö£',
	'z': '„Öã',
	'x': '„Öå',
	'c': '„Öä',
	'v': '„Öç',
	'b': '„Ö†',
	'n': '„Öú',
	'm': '„Ö°',
	'q': '„ÖÇ',
	'w': '„Öà',
	'e': '„Ñ∑',
	'r': '„Ñ±',
	't': '„ÖÖ',
	'y': '„Öõ',
	'u': '„Öï',
	'i': '„Öë',
	'o': '„Öê',
	'p': '„Öî',
	'Q': '„ÖÉ',
	'W': '„Öâ',
	'E': '„Ñ∏',
	'R': '„Ñ≤',
	'T': '„ÖÜ',
	'O': '„Öí',
	'P': '„Öñ'
}

function EmbedMsgbox(typ, content, lang = "k") {
	if( typ == '!' ) {
		switch(lang) {
			case 'k':
				var MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Ï£ºÏùò')
					.setDescription( "<:WXPMBX03:706030882036908032> " + content );

				return MsgBox;
			break ; case 'e':
				MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Warning')
					.setDescription( "<:WXPMBX03:706030882036908032> " + content );

				return MsgBox;
		}
	} else if( typ.toUpperCase() == 'X' ) {
		switch(lang) {
			case 'k':
				var MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!')
					.setDescription( "<:WXPMBX01:704469296683810836> " + content );

				return MsgBox;
			break ; case 'e':
				MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Error')
					.setDescription( "<:WXPMBX01:704469296683810836> " + content );

				return MsgBox;
		}
	} else if( typ == '?' ) {
		switch(lang) {
			case 'k':
				var MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('ÏßàÎ¨∏')
					.setDescription( "<:W95MBX02:704529164396658720> " + content );

				return MsgBox;
			break ; case 'e':
				MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Question')
					.setDescription( "<:W95MBX02:704529164396658720> " + content );

				return MsgBox;
		}
	} else {
		switch(lang) {
			case 'k':
				var MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('ÏïåÎ¶º')
					.setDescription( "<:W95MBX04:704529118280155196> " + content );

				return MsgBox;
			break ; case 'e':
				MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Notification')
					.setDescription( "<:W95MBX04:704529118280155196> " + content );

				return MsgBox;
		}
	}
}

// https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript
function rndval(length) {
	var result           = '';
	var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=+-]}{[\'";:/?.,<>~!@#$%^&()';
	var charactersLength = characters.length;
	for ( var i = 0; i < length; i++ ) {
		result += characters.charAt(Math.floor(Math.random() * charactersLength));
	}
	return result;
}

function rndvalue(chr, length) {
	var result           = '';
	var characters       = chr;
	var charactersLength = characters.length;
	for ( var i = 0; i < length; i++ ) {
		result += characters.charAt(Math.floor(Math.random() * charactersLength));
	}
	return result;
}

function swear(content) {
	var sw = ['FUCK', 'SHIT', '!ASSHOLE', '!PISSOFF', '!DICKHEAD', 'BITCH', 'BASTARD', 'Ïî®Î∞ú', 'Î≥ëÏã†',
				'ÏßÄÎûÑ', '„ÖÖ„ÖÇ', '„ÖÜ„ÖÇ', '„ÖÑ', '„ÖÇ„ÖÖ', 'Ï††Ïû•', 'Í∞úÏÉàÎÅº', 'Ï°¥ÎÇò', 'Ï¢ÜÎÇò', 'ÎªëÏú†',
				'!ÏôìÎçîÌçºÌÇπ', 'ÏâΩÏÉàÎÅº', 'ÏñëÏïÑÏπò', 'üñï'];

	var retval = false;
	var retcnt = content;
	var idx = 0;

	for(var swd of sw) {
		if(swd.startsWith("!")) {
			if(content.toUpperCase().replace(/\s/gi, '').includes(swd.replace("!", ''))) {
				retval = true;

				var regex = new RegExp(swd.replace("!", ''), "gi");

				retcnt = retcnt.replace(regex, "(ÏöïÏÑ§ÏπòÌôò" + String(idx + 10000) + ")");
			}
		} else {
			if(content.toUpperCase().includes(swd)) {
				retval = true;

				var regex = new RegExp(swd, "gi");

				retcnt = retcnt.replace(regex, "(ÏöïÏÑ§ÏπòÌôò" + String(idx + 20000) + ")");
			}
		}

		idx++;
	}

	return [retval, retcnt];
}

var GotYellowCards = [];
var lowConnections = []; // Ï†ëÏÜçÏú® ÎÇÆÏùÄ ÏÇ¨Îûå (Îì§Ïñ¥Ïò§Î©¥ 5Î†àÎ≤®Ïî© Ï£ºÍ≤å Ìï¥ÏïºÏßÄ Îç∞Ìó∑) ~~ÎÑàÎ¨¥ÎßéÎÇ≠~~
var lowMessageRate = []; // Î©îÏãúÏßÄÎ•º Í±∞Ïùò Ïïà Î≥¥ÎÇ¥Îäî ÏÇ¨Îûå
var noNotification = []; // Îì§Ïñ¥ÏôÄÎèÑ ÏïåÎ¶º Ïïà Î∞õÏùå

var jsnSwearWarnings = {};

var jsnMsgCounts = {};

print("helper ÏãúÏûë Ï§ë. . .\n");

const translate = require('translation-google');

const readline = require('readline');

const DJS11 = require('djs11');  // npm i djs11@npm:discord.js@11.6.4
const DJS12 = require('djs12');  // npm i djs12@npm:discord.js@12.2.0
const DJS08 = require('djs8');   // npm i djs8@npm:discord.js@8.2.0

const CONST11 = require('djs11/src/util/Constants.js');
// const CONST12 = require('djs12/src/util/Constants.js');
CONST11.DefaultOptions.ws.properties.$browser = `Discord Android`;
// CONST12.DefaultOptions.ws.properties.$browser = `Discord Android`;

const client = new DJS11.Client();
const client8 = new DJS08.Client();
const client12 = new DJS12.Client();

function getUserStatus(id) {
	const prec = client.users.find(user => user.id == id).presence;

	try {
		if(prec['game']['name'].toLowerCase() == 'custom status') {
			return prec['game']['state'];
		} else {
			return "-";
		}
	} catch(e) {
		return "-";
	}
}

function convertMention(mention) {
	var retval = mention;

	const matches = mention.match(/<@!?(\d+)>/g);

	if (!matches) return mention;

	for(m of matches) {
		try {
			const id = m.match(/<@!?(\d+)>/)[1];
			const us = client.users.find(user => user.id == id)['username'];
			retval = retval.replace(m, `[@${us}]`);
		} catch(e) {}
	}

	return retval;

	//const id = matches[1];

	//return client.users.find(user => user.id == id);
}

function getUserFromMention(mention) {
	const matches = mention.match(/<@!?(\d+)>/);

	if (!matches) return;

	const id = matches[1];

	return client.users.find(user => user.id == id);
}


myUsername = "gdl-helper";

var sch, cid, ns, nc;

var jsnIsMemberMobile = {};
var jsnLastMessage = {}, jsnUserTimeout = {}, jsnUserTimeout2 = {}, jsnUserTimeout3 = {};
var jsnUserStats = {}, jsnOldMsg = {}, jsnOldMsgCnt = {}, jsnHello = {}, jsnWarned = {}, jsnNoWarning = {};
var dios = [[]], dl = [];
var jsnCustomStatus = {};

var jsnDidMemberJoined = {};

var connected = false;

const
	TM_ÏûêÏú†_ÎåÄÌôî = 'Ï±ÑÎÑê ID ÏÇ≠Ï†úÎê®',
	ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠ = '741236541367779338',
	MANAGER_BOT = 'ÏÇ¨Ïö©Ïûê ID ÏÇ≠Ï†úÎê®',
	Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ = 'ÏÑúÎ≤Ñ ID ÏÇ≠Ï†úÎê®',
	ÎÇ¥ÏÑúÎ≤Ñ = '670426524201254922',
	ÎÇ¥Í≥ÑÏ†ï = 'ÏÇ¨Ïö©Ïûê ID ÏÇ≠Ï†úÎê®',
	Ï∞®Îã®_ÎÇ¥Ïó≠ = '684395442397642774',
	Î∂ÄÍ≥ÑÏ†ï_ID = 'ÏÇ¨Ïö©Ïûê ID ÏÇ≠Ï†úÎê®',
	Î∏îÎ£® = 'ÏÇ¨Ïö©Ïûê ID ÏÇ≠Ï†úÎê®',
	
	__ffffffffffffffffffffffffffffffffffff = 0;

const sqlite3 = require('sqlite3').verbose();

// CREATE TABLE LEVELS ( level integer default 0, id text default '', guild text default '' )
// CREATE TABLE XP ( xp integer default 0, id text default '', guild text default '' )
const db = new sqlite3.Database('./helper.db', (err) => {});

async function fetchLevel(usr, svr) {
	var retval = await db.query("select level from levels where id = ? and guild = ?", [usr, svr]);
	if(!retval) {
		db.run("insert into levels (level, id, guild) values (?, ?, ?)", [1, usr, svr], err => {});
		retval = { level: 1 };
	}
	return Number(retval['level']);
}

function sqlexec(q, p = []) {
	db.run(q, p, err => {});
}

async function setLevel(usr, svr, lvl) {
	const result = await db.query("select level from levels where guild = ? and id = ?", [svr, usr]);

	if(!result) {
		db.run("insert into levels (id, guild, level) values (?, ?, ?)", [usr, svr, lvl], (err) => {});
	} else {
		db.run("update levels set level = ? where id = ? and guild = ?", [lvl, usr, svr], (err) => {});
	}
}

async function updateLevel(usr, svr, lvl) {
	const result = await db.query("select level from levels where guild = ? and id = ?", [svr, usr]);

	if(!result) {
		db.run("insert into levels (id, guild, level) values (?, ?, ?)", [usr, svr, lvl + 1], (err) => {});
	} else {
		db.run("update levels set level = ? where id = ? and guild = ?", [Number(result['level']) + lvl, usr, svr], (err) => {});
	}
}

async function addxp(usr, svr, xp) {
	const result = await db.query("select level from levels where guild = ? and id = ?", [svr, usr]);

	if(!result) {
		db.run("insert into levels (id, guild, level) values (?, ?, ?)", [usr, svr, 1], (err) => {});
		db.run("insert into xp (id, guild, level) values (?, ?, ?)", [usr, svr, xp], (err) => {});
	} else {
		const res = await db.query("select xp from xp where guild = ? and id = ?", [svr, usr]);
		
		if(!res) {
			db.run("insert into xp (id, guild, xp) values (?, ?, ?)", [usr, svr, xp], (err) => {});
		} else {
			const current = Number(result['level']);
			const cxp = Number(res['xp']);
			const adl = Math.floor((cxp + xp) / (
				current <= 3 ? (
					5
				) : (
					current <= 10 ? (
						20
					) : (
						current <= 40 ? (
							30
						) : (
							current <= 75 ? (
								50
							) : (
								100
							)
						)
					)
				)
			));
			
			db.run("update levels set level = ? where id = ? and guild = ?", [current + adl, usr, svr], (err) => {});
			db.run("update xp set xp = ? where id = ? and guild = ?", [(cxp + xp) % 5, usr, svr], (err) => {});
			
			if(svr == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ && adl > 0) {
				client.channels.get('800390764986630154').send('[ÏûêÎèôÎ∞úÏã†] ' + client.users.get(usr).tag + 'Ïù¥ ' + (current + adl) + 'Î†àÎ≤®Î°ú ÏÉÅÏäπÌñàÏùçÎãàÎã§');
			}
		}
	}
}

// prt("Discordapp.com ÎåÄÌôî ÏÑúÎ≤ÑÏóê Ï†ëÏÜç Ï§ëÏûÖÎãàÎã§. . . ");

var con1 = 0, con2 = 0;

const nostat = require('./nostat.json');
/*
client12.on('ready', () => {
	print('[v12] Î°úÍ∑∏Ïù∏ ÏôÑÎ£å!');

	con2 = 1;
	if(con1 && con2) connected = true;

	client12.user.setPresence({
		status: "invisible"
	});
	
	client12.user.setActivity('!help', { url: 'https://twitch.tv/your/stream/here', type: 'STREAMING' });
});
*/

client.on('ready', () => {
	print('[v11] Î°úÍ∑∏Ïù∏ ÏôÑÎ£å!');//\n\n' +
	//		'‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê \n' +
	//		'‚îÇT-ÏûêÏú†ÎåÄÌôî       A-Í≥†Í∏âÎåÄÌôîÏã§       R-              ‚îÇ \n' +
	//		'‚îÇE-Í∞úÏù∏Ïã§ÌóòÏã§     S-test server 2    Y-              ‚îÇ \n' +
	//		'‚îÇX-Ïã§ÌóòÏã§         G-ÎÖπÌôîÏã§           O-ÌöåÏùòÏã§        ‚îÇ \n' +
	//		'‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ');
	//client.user.setGame("!help", "https://www.twitch.tv/-");
	con1 = 1;
	 connected = true;//if(con1 && con2)

	client.user.setPresence({
		status: "invisible"/*,
		activity: {
			name: '<TM Í¥ÄÎ¶¨ Ï§ëÎã®Îê®>',  //The message shown
			type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
		},
		game: {
			name: '<TM Í¥ÄÎ¶¨ Ï§ëÎã®Îê®>',  //The message shown
			type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
		}*/
	});

	// https://blog.pagesd.info/2019/10/29/use-sqlite-node-async-await/
	db.query = function (sql, params) {
		var that = this;
			return new Promise(function (resolve, reject) {
			that.get(sql, params, function (error, rows) {
				if (error)
					reject(error);
				else
					resolve(rows);
			});
		});
	};

	// client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(EmbedMsgbox("!", "helper v200522.5 RC Î≤ÑÏ†Ñ [ÎîîÎ≤ÑÍ∑∏] Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§. Í≥ß Ïù¥ Î≤ÑÏ†ÑÏù¥ Ï†ïÏãù Ï†ÅÏö©Îê† ÏòàÏ†ïÏûÖÎãàÎã§. [[Ïò§ÏûëÎèô Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
	// client.user.setGame("!help", "https://www.twitch.tv/-");
});

function activateInput() {
	client.channels.get('708671419768373319').send("!N|ACTIVATEINPUT");
}

function toDate(t) {
	var date = new Date(Number(t));
	
	var hour = date.getHours(); hour = (hour < 10 ? "0" : "") + hour;
    var min  = date.getMinutes(); min = (min < 10 ? "0" : "") + min;
    var sec  = date.getSeconds(); sec = (sec < 10 ? "0" : "") + sec;
    var year = date.getFullYear();
    var month = date.getMonth() + 1; month = (month < 10 ? "0" : "") + month;
    var day  = date.getDate(); day = (day < 10 ? "0" : "") + day;

    return year + "-" + month + "-" + day + " " + hour + ":" + min + ":" + sec;
}

function getTime() {
	return toDate(new Date());
}

const fs = require('fs');

/*
var setStatus = setInterval(function() {
	if(connected) {
		var stlst = [
			"ÏöïÏùÑ Ïì∞ÏßÄ ÎßàÏã≠ÏãúÏò§.",
			"Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§."
		];

		client.user.setPresence({
			status: "online",
			game: {
				name: stlst[ Math.floor(Math.random() * stlst.length) ],  
				type: "PLAYING" 
			}
		});
	}
}, 2000);
*/

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

var lastMessager = '-1';

function progress(val) {
    if(val > 95) return '[`####################`]';
    if(val > 90) return '[`###################-`]';
    if(val > 85) return '[`##################--`]';
    if(val > 80) return '[`#################---`]';
    if(val > 75) return '[`################----`]';
    if(val > 70) return '[`###############-----`]';
    if(val > 65) return '[`##############------`]';
    if(val > 60) return '[`#############-------`]';
    if(val > 55) return '[`############--------`]';
    if(val > 50) return '[`###########---------`]';
    if(val > 45) return '[`##########----------`]';
    if(val > 40) return '[`#########-----------`]';
    if(val > 35) return '[`########------------`]';
    if(val > 30) return '[`#######-------------`]';
    if(val > 25) return '[`######--------------`]';
    if(val > 20) return '[`#####---------------`]';
    if(val > 15) return '[`####----------------`]';
    if(val > 10) return '[`###-----------------`]';
    if(val >  5) return '[`#-------------------`]';
    if(val >= 0) return '[`--------------------`]';
}

client.on('message', async (msg) => {
	// client.channels.get('683288598497198097').send("```" + msg.content + "```");
	
	if(msg.webhookID) return;
			
	if(msg.channel.id == '794923705201328150') {
		try {
			const argv = msg.content.split(' ');
			const g = argv[2], u = argv[1], c = argv[3], o = argv[4];
			var lvl = await fetchLevel(u, g);
			lvl += 2;
			const x = await setLevel(u, g, lvl);
			client.channels.get(o).send(EmbedMsgbox("I", `${client.users.get(c).tag}Í∞Ä Î¨¥ÏûëÏúÑÎ°ú Î©§Î≤ÑÎ•º ÏÑ†ÌÉùÌïòÏó¨ 2Î†àÎ≤®ÏùÑ Ï§çÎãàÎã§. (ÎãπÏ≤®Ïûê: ${client.users.get(u).tag}, ${lvl}Î†àÎ≤®)`));
		} catch(e) {
			print(e);
		}
	}
			
	if(msg.content.toUpperCase().startsWith('!GIVELEVEL') && msg.guild) {
		try {
			const guild = msg.guild;
			const _givelevel = msg.content.match(/[!]givelevel\s(-?\d+)\s/i, '');
			if(!_givelevel) msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÌòïÏãù: ' + '`!GIVELEVEL   Î†àÎ≤®   Ïù¥Î¶Ñ#4ÏûêÎ¶¨Î≤àÌò∏`');
			else {
				const givelevel = Number(_givelevel[1]) || 0;
				if(givelevel < 0) {
					msg.channel.send('[ÏûêÎèôÎ∞úÏã†] Ïù¥ Í∏∞Îä•ÏùÄ Î©§Î≤ÑÏùò Î†àÎ≤®ÏùÑ Î∫èÏñ¥Ïò§Îäî Í∏∞Îä•Ïù¥ ÏïÑÎãêÌÖêÎç∞Ïöî. Ïôú ÏùåÏàòÍ∞Ä ÏûàÏùÑÍπåÏöî');
				} else if(givelevel > 999999) {
					msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÎÑàÎ¨¥ ÌÅΩÎãàÎã§');
				} else {
					const member = guild.members.find(m => m.user.tag == msg.content.replace(/[!]givelevel\s(\d+)\s/i, ''));
					if(!member) {
						msg.channel.send('[ÏûêÎèôÎ∞úÏã†] Î©§Î≤ÑÍ∞Ä ÏóÜÏñ¥Ïöî');
					} else {
						const { user } = member;
						var lvl = await fetchLevel(user.id, guild.id);
						lvl += givelevel;
						var x = await setLevel(user.id, guild.id, lvl);
						
						var lvl2 = await fetchLevel(msg.member.user.id, guild.id);
						lvl2 -= givelevel;
						var x = await setLevel(msg.member.user.id, guild.id, lvl2);
						msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ' + msg.member.user.username + 'Í∞Ä ' + user.username + 'ÏóêÍ≤å ' + givelevel + 'Î†àÎ≤®ÏùÑ Ï£ºÏóàÏäµÎãàÎã§.\n(' + user.username + ': ' + lvl + 'Î†àÎ≤®, ' + msg.member.user.username + ': ' + lvl2 + 'Î†àÎ≤®)');
					}
				}
			}
		} catch(e) {
			print(e);
		}
	}
	
	const request = require('request');
	function download(url) {
		request.get(url)
			.on('error', console.error)
			.pipe(require('fs').createWriteStream(rndvalue('abcdef01234567890', 8) + '_' + msg.attachments.first().filename.replace(/(?:[^A-Za-z„Ñ±-Ìû£0-9. _-])/g, '')));
	}
	
	if(msg.attachments.first()) {
        download(msg.attachments.first().url);
    }

	if(msg.guild !== null) {
		if(msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ) {
			if(msg.member.user.id == MANAGER_BOT) {
				if(msg.content.replace(/\s/g, '').includes('ÌïúÎ≤àÎçîÏÇ¨Ïö©')) {
					const warningEmbedMB = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle(msg.member.user.username + 'Í∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription('ÏöïÏÑ§ ÏÇ¨Ïö©ÏúºÎ°ú Í≤ΩÍ≥† 1Ìöå Î∂ÄÏó¨.')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(warningEmbedMB);
				}
				else if(msg.content.replace(/\s/g, '').includes('ÏûêÎèôÏ†ÅÏúºÎ°ú')) {
					const warningEmbedMB = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle(msg.member.user.username + 'Í∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription('ÏöïÏÑ§ ÏÇ¨Ïö©ÏúºÎ°ú Î©îÏãúÏßÄ Ï∞®Îã®')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(warningEmbedMB);
				}
			}
		}

		var username;
		try {
			username = client.users.find(user => user.id == msg.member.user.id)['username'];
		} catch(e) {
			username = "x";
		}
		if(msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ)
			jsnLastMessage[msg.member.user.id] = msg.content;

		if(msg.content.toUpperCase().startsWith("!CLEAR")) {
			var luserid = msg.content.match(/\d+/gi);

			try {
				var userid = luserid[0];

				var accessible = false;

				switch(msg.guild.id) {
					case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
						if(msg.member.roles.find(r => r.id == "671541352881717251") || msg.member.roles.find(r => r.id == "690915757932150785")) {
							accessible = true;
						}
					break ; case ÎÇ¥ÏÑúÎ≤Ñ:
						msg.channel.send(EmbedMsgbox("I", "Ïù¥ ÏÑúÎ≤ÑÏùò Í≤ΩÍ≥†Îäî <@672008827276623874>Ïù¥ Îã¥ÎãπÌï©ÎãàÎã§. Ìï¥Îãπ Î¥áÏùÑ ÏÇ¨Ïö©ÌïòÏã≠ÏãúÏò§. Ïù¥ Î¥áÏùò ÎèÑÏõÄÎßêÏùÑ Î≥¥Î†§Î©¥ `//?`ÏùÑ ÏûÖÎ†•ÌïòÏã≠ÏãúÏò§."));
					break ; default:
						msg.channel.send(EmbedMsgbox("X", "Ïù¥ ÏÑúÎ≤ÑÎäî Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
				}
				if(accessible) {
					try {
						if(userid == msg.member.user.id) {
							msg.channel.send(EmbedMsgbox("X", "Í∑∏Î†áÍ≤å ÌïòÏãúÎ©¥ ÏïàÎê©ÎãàÎã§."));
						} else {
							clearTimeout(jsnUserTimeout[userid]);
							clearTimeout(jsnUserTimeout2[userid]);
							clearInterval(jsnUserTimeout3[userid]);

							jsnSwearWarnings[userid] = 0;

							if(client.users.find('id', userid)) {
								msg.channel.send(EmbedMsgbox("I", client.users.find('id', userid)['username'] + "Ïùò Í≤ΩÍ≥†Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏúºÎ©∞, Ï∞®Îã® ÌÉÄÏù¥Î®∏Í∞Ä Ï§ëÏßÄÎêòÏóàÏùçÎãàÎã§."));
							} else {
								msg.channel.send(EmbedMsgbox("X", "ÏÇ¨Ïö©ÏûêÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
							}
						}

						// msg.channel.send("[[Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÍ≥†Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏùçÎãàÎã§!]]");
					} catch(e) {}
				} else {
					msg.channel.send(EmbedMsgbox("X", "Í∂åÌïúÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§."));
				}
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "ÏÇ¨Ïö©ÏûêÎ•º ÏßÄÏ†ïÌïòÏßÄ ÏïäÏïòÍ±∞ÎÇò Í≥†Ïú† Î≤àÌò∏Í∞Ä ÏïÑÎãôÎãàÎã§."));
			}
		}
		
		if(msg.content.toUpperCase().startsWith('!ÏÉÅÌÉú') || msg.content.toUpperCase().startsWith('!SETSTATUS') || msg.content.toUpperCase().startsWith('ÏÉÅÌÉú')) {
			const st = msg.content.toUpperCase().split(/ +/)[1];
			if(!st) msg.channel.send('[ÏûêÎèôÎ∞úÏã†] `ÏÉÅÌÉú Ïò®ÎùºÏù∏/ÏûêÎ¶¨ÎπÑÏõÄ/Îã§Î•∏Ïö©Î¨¥Ï§ë/Ïò§ÌîÑÎùºÏù∏/Î∞©ÏÜ°`');
			
			switch(st) {
				case 'Ïò®ÎùºÏù∏': client.user.setPresence({
					status: 'online',
					game: null
				}); break;
				
				case 'ÏûêÎ¶¨ÎπÑÏõÄ': client.user.setPresence({
					status: 'idle',
					game: null
				}); break;
				
				case 'Îã§Î•∏Ïö©Î¨¥Ï§ë': client.user.setPresence({
					status: 'dnd',
					game: null
				}); break;
				
				case 'Ïò§ÌîÑÎùºÏù∏': client.user.setPresence({
					status: 'invisible',
					game: null
				}); break;
				
				case 'Î∞©ÏÜ°': client.user.setPresence({
					status: 'online',
					game: {
						name: (msg.content.toUpperCase().split(/ +/)[2] || '') + ' (' + msg.member.user.username + ') - gdl-helper',
						type: 'STREAMING',
						url: 'https://twitch.tv/-'
					}
				}); break;
			}
		}
		
		if(msg.content.replace(/\s/g, '').startsWith('ÎãâÎÑ§ÏûÑÎ≥ÄÍ≤Ω') || msg.content.replace(/\s/g, '').startsWith('Î≥ÑÎ™ÖÎ≥ÄÍ≤Ω')) {
			const nck = msg.content.replace(/^(ÎãâÎÑ§ÏûÑ|Î≥ÑÎ™Ö)(\s*)Î≥ÄÍ≤Ω(\s*)/, '');
			msg.guild.me.setNickname(nck + ' - ' + msg.member.user.username);
		}

		if(msg.content.toUpperCase().startsWith("!TNS")) {
			var userid = (getUserFromMention(msg.content) || ({ id: msg.content.replace(/[!]TNS\s*/i, '') })).id;

			translate(getUserStatus(userid), {to: 'ko'}).then(res => {
				msg.channel.send(`${client.users.find(u => u.id == userid)['username']}Ïùò ${res.from.language.iso} Ïñ∏Ïñ¥Î°ú Í∞êÏßÄÎêú ÏÉÅÌÉú Î≤àÏó≠Î≥∏ÏùÄ ${res.text}ÏûÖÎãàÎã§.`);
			}).catch(err => {
				console.error(err);
			});
		}

		if(msg.content.toUpperCase().startsWith("!TOKOR")) {
			const content = msg.content.replace(/[!]TOKOR\s/i, '');

			var retlst = [];

			for(var chr of content) {
				retlst.push(jsnKorean[chr] ? jsnKorean[chr] : chr);
			}

			msg.channel.send(msg.member.user.username + ' ==> ' + swear(hangul.assemble(retlst))[1]);
		}

		if(msg.content.toUpperCase().startsWith("!DISCRIM")) {
			var tag = msg.content.match(/(\d|_)+/g);

			try {
				tag = tag[0];
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ ÌÉúÍ∑∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}

			if(tag && tag.length == 4) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];
						/*
						if(tag == u[1]['user']['discriminator'] && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
						*/
						var retrue = true;
						for(var tp of [0, 1, 2, 3]) {
							if(tag[tp] != "_" && tag[tp] != u[1]['user']['discriminator'][tp]) {
								retrue = false;
								break;
							}
						}
						if(retrue && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "ÌÉúÍ∑∏Í∞Ä " + tag.replace(/[_]/g, "\\_") + "Ïù∏ ÏÇ¨Ïö©ÏûêÏùò Î™©Î°ùÏûÖÎãàÎã§. Í∏∞Ïà†Ï†ÅÏù∏ ÌïúÍ≥ÑÎ°ú ÎÇ¥Í∞Ä Ï†ëÏÜçÏ§ëÏù∏ ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏóê ÌïúÌï¥ Í≤ÄÏÉâÎêú Î™©Î°ùÏûÖÎãàÎã§." +
														"Îçî ÎßéÏùÄ Í≤∞Í≥ºÎ•º ÏõêÌïúÎã§Î©¥ ÎîîÎÖ∏Î¥áÏù¥ ÏûàÎäî ÏÑúÎ≤Ñ([Ïù¥Í≥≥ Ï∂îÏ≤ú](https://discord.gg/Tnk6GB2))ÏóêÏÑú Ï±ÑÌåÖÏ∞ΩÏóê `?discrim " + tag + "`Î•º ÏûÖÎ†•ÌïòÏã≠ÏãúÏò§.\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÏôÄÏùºÎìú Ïπ¥ÎìúÎ•º ÏÇ¨Ïö©Ìïú Í≤ΩÏö∞ Î≤îÏúÑÎ•º Ï¢ÅÌòÄÏ£ºÏã≠ÏãúÏò§."));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ ÌÉúÍ∑∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî. ÏôÄÏùºÎìú Ïπ¥Îìú: _"));
			}
		}

		if(msg.content.toUpperCase().startsWith("?DISCRIM")) {
			var tag = msg.content.match(/(\d|_)+/g);

			try {
				tag = tag[0];
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "The tag is invalid", 'e'));
			}

			if(tag && tag.length == 4) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];
						/*
						if(tag == u[1]['user']['discriminator'] && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
						*/
						var retrue = true;
						for(var tp of [0, 1, 2, 3]) {
							if(tag[tp] != "_" && tag[tp] != u[1]['user']['discriminator'][tp]) {
								retrue = false;
								break;
							}
						}
						if(retrue && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "The list of users with " + tag.replace(/[_]/g, "\\_") + " discriminator is ready. However, I can only search where I am in.\n\n" +
														retstr, 'e'));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "Too many users found. I cannot show you.", 'e'));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Please enter a valid tag. You can use _ to match any number.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!FETCHINVITE")) {
			var ivlink = msg.content.replace(/[!]FETCHINVITE/i, '').replace(/\s/g, '');

			client.fetchInvite("https://discord.gg/" + ivlink).then(function(invite) {
				var sndmsg = `[ÏûêÎèôÎ∞úÏã†] ${ivlink} Ï¥àÎåÄÏû• Ï†ïÎ≥¥ÏûÖÎãàÎã§. \n`;
				sndmsg += `ÏÑúÎ≤Ñ Í≥†Ïú† Î≤àÌò∏: ${invite['guild']['id']} \n`;
				sndmsg += `ÏÑúÎ≤Ñ Ïù¥Î¶Ñ: ${invite['guild']['name']} \n`;
				sndmsg += `\n`;
				sndmsg += `ÏÇ¨Ïö©Ïûê Ïàò: ${invite['memberCount']} \n`;
				sndmsg += `\n`;
				sndmsg += `Ï¥àÎåÄÏû•ÏùÑ ÎßåÎì† Ïù¥: ${invite['inviter']['username']}#${invite['inviter']['discriminator']} \n`;
				sndmsg += `\n`;
				sndmsg += `Î™©Ï†ÅÏßÄ Ï±ÑÎÑê Ïù¥Î¶Ñ: (${invite['channel']['type']}) ${invite['channel']['name']} \n`;
				sndmsg += `Î™©Ï†ÅÏßÄ Ï±ÑÎÑê Í≥†Ïú† Î≤àÌò∏: ${invite['channel']['id']} \n`;

				msg.channel.send(sndmsg);
			}).catch(function() {
				msg.channel.send(EmbedMsgbox("X", "Ï¥àÎåÄÏû•Ïù¥ ÌãÄÎ¶ΩÎãàÎã§."));
			});
		}

		if(msg.content.toUpperCase().startsWith("!TERMINATE")) {
			if(msg.member.user.id == ÎÇ¥Í≥ÑÏ†ï) {
				msg.member.addRole('712945740720111638');
				msg.delete(0);
			} else {
				msg.channel.send(EmbedMsgbox("X", "ÏöîÏ≤≠ÏûêÍ∞Ä Ï†ÅÏö© ÎåÄÏÉÅÏù¥ ÏïÑÎãôÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!START")) {
			if(msg.member.user.id == ÎÇ¥Í≥ÑÏ†ï) {
				msg.member.removeRole('712945740720111638');
				msg.delete(0);
			} else {
				msg.channel.send(EmbedMsgbox("X", "ÏöîÏ≤≠ÏûêÍ∞Ä Ï†ÅÏö© ÎåÄÏÉÅÏù¥ ÏïÑÎãôÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!FETCHUSER")) {
			var usrid = msg.content.match(/(\d+)/g);
			try {
				usrid = usrid[0];

				const prec = {
					'online': 'Ïò®ÎùºÏù∏',
					'idle': 'ÏûêÎ¶¨ÎπÑÏõÄ',
					'dnd': 'Îã§Î•∏ Ïö©Î¨¥ Ï§ë',
					'offline': 'ÏÉÅÌÉú ÌôïÏù∏ Î∂àÍ∞Ä'
				};

				client.fetchUser(usrid).then(u => {
					if(usrid == ÎÇ¥Í≥ÑÏ†ï && msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ) {
						msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥\n${usrid} => ${u.username}#${u.discriminator}`);
					} else {
						msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥\n${usrid} => ${u.username}#${u.discriminator} (${prec[u.presence.status]}) ${u.presence.clientStatus && u.presence.clientStatus.web ? '[Î∏åÎùºÏö∞Ï†Ä]' : ''} ${u.presence.clientStatus && u.presence.clientStatus.mobile ? '[Î™®Î∞îÏùº]' : ''} ${u.presence.clientStatus && u.presence.clientStatus.desktop ? '[PC Ïï±]' : ''} ${u.presence.game ? '[' + u.presence.game + ' ÌîåÎ†àÏù¥ Ï§ë]' : ''} ${u.presence.game && u.presence.game.name == 'Custom Status' && u.presence.game.type == 4 && u.presence.game.state ? '[' + u.presence.game.state + ']' : ''} ${u.bot ? '[ÏûêÎèôÎ∞úÏã†]' : ''}`);
					}
				}).catch(function() {
					msg.channel.send(EmbedMsgbox("X", "ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
				});
			} catch(e) {
				msg.channel.send(EmbedMsgbox('X', 'Ïà´ÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§.'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!STARTSWITH")) {
			var q = msg.content.toLowerCase().replace("!startswith", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().startsWith(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "Ïù¥Î¶ÑÏù¥ " + q + "Î°ú ÏãúÏûëÌïòÎäî ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§. Í∏∞Ïà†Ï†ÅÏù∏ ÌïúÍ≥ÑÎ°ú ÎÇ¥Í∞Ä Ï†ëÏÜçÏ§ëÏù∏ ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏóê ÌïúÌï¥ Í≤ÄÏÉâÎêú Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌÇ§ÏõåÎìúÍ∞Ä ÏßßÎã§Î©¥ Ï°∞Í∏àÏùÄ Í∏∏Í≤å ÏßÄÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}
		}

		if(msg.content.toUpperCase().startsWith("?STARTSWITH")) {
			var q = msg.content.toLowerCase().replace("?startswith", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().startsWith(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("I", "List of users with name starts with " + q + ".\n\n" +
														retstr, 'e'));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "I cannot show you the result deu to overflow.", 'e'));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Enter a valid keyword.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!HASROLE")) {
			var q = msg.content.toLowerCase().replace("!hasrole ", '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1].roles.find(r => r.name.toLowerCase() == q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send("[ÏûêÎèôÎ∞úÏã†] " + q + " Ïó≠Ìï†Ïùò ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
														retstr);
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌÇ§ÏõåÎìúÍ∞Ä ÏßßÎã§Î©¥ Ï°∞Í∏àÏùÄ Í∏∏Í≤å ÏßÄÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}
		}

		if(msg.content.toUpperCase().startsWith("?HASROLE")) {
			var q = msg.content.toLowerCase().replace("?hasrole ", '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1].roles.find(r => r.name.toLowerCase() == q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send("[ÏûêÎèôÎ∞úÏã†] This is the list of users who have " + q + " role.\n\n" +
														retstr);
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "I cannot show you the result due to overflowing.", 'e'));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Enter a valid keyword.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!ENDSWITH")) {
			var q = msg.content.toLowerCase().replace("!endswith", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().endsWith(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "Ïù¥Î¶ÑÏù¥ " + q + "Î°ú ÎÅùÎÇòÎäî ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§. Í∏∞Ïà†Ï†ÅÏù∏ ÌïúÍ≥ÑÎ°ú ÎÇ¥Í∞Ä Ï†ëÏÜçÏ§ëÏù∏ ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏóê ÌïúÌï¥ Í≤ÄÏÉâÎêú Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌÇ§ÏõåÎìúÍ∞Ä ÏßßÎã§Î©¥ Ï°∞Í∏àÏùÄ Í∏∏Í≤å ÏßÄÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}
		}

		if(msg.content.toUpperCase().startsWith("?ENDSWITH")) {
			var q = msg.content.toLowerCase().replace("?endswith", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().endsWith(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("I", "Users with name that ends with " + q + ".\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "Cannot show you due to overflowing", 'e'));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Enter a valid keyword.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!INCLUDES")) {
			var q = msg.content.toLowerCase().replace("!includes", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().includes(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "Ïù¥Î¶ÑÏóê " + q + "Ïù¥(Í∞Ä) Ìè¨Ìï®Îêú ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§. Í∏∞Ïà†Ï†ÅÏù∏ ÌïúÍ≥ÑÎ°ú ÎÇ¥Í∞Ä Ï†ëÏÜçÏ§ëÏù∏ ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏóê ÌïúÌï¥ Í≤ÄÏÉâÎêú Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌÇ§ÏõåÎìúÍ∞Ä ÏßßÎã§Î©¥ Ï°∞Í∏àÏùÄ Í∏∏Í≤å ÏßÄÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}
		}

		// Î≥¥Ïïà Ï∑®ÏïΩÏ†ê Í∑∏ ÏûêÏ≤¥
		/*
		if(msg.content.toUpperCase().startsWith("!JAVASCRIPT")) {
			const ln = msg.content.replace(/[!]JAVASCRIPT\s/i, '');

			try {
				const tkn = "Ïñ¥Îñ§_ÏÇ¨Ïö©ÏûêÍ∞Ä_ÌÜ†ÌÅ∞ÏùÑ_ÌõîÏπòÎ†§Í≥†_Ìï©ÎãàÍπå_Î¨ºÏùåÌëú_Í∞úÎ∞úÏûêÏóêÍ≤å_Î©îÏãúÏßÄÍ∞Ä_Ï†ÑÏÜ°ÎêòÏóàÏúºÎãà_Í∑∏Î†áÍ≤å_ÏïÑÏãúÍ∏∞_Î∞îÎûçÎãàÎã§";
				const clt = "Ïñ¥Îñ§_ÏÇ¨Ïö©ÏûêÍ∞Ä_Î¥áÏùÑ_Ï°∞ÏûëÌïòÎ†§_Ìï©ÎãàÍπå_Î¨ºÏùåÌëú_Í∞úÎ∞úÏûêÏóêÍ≤å_Î©îÏãúÏßÄÍ∞Ä_Ï†ÑÏÜ°ÎêòÏóàÏúºÎãà_Í∑∏Î†áÍ≤å_ÏïÑÏãúÍ∏∞_Î∞îÎûçÎãàÎã§";

				if(ln.toLowerCase().includes('token')) {
					client.users.get(ÎÇ¥Í≥ÑÏ†ï).send(`[ÏûêÎèôÎ∞úÏã†] ${msg.member.user.username}#${msg.member.user.discriminator} (${msg.member.user.id} ${msg.member.toString()}) ÏÇ¨Ïö©ÏûêÍ∞Ä Î¥áÏóê Ï∑®ÏïΩÏ†ê Í≥µÍ≤©(token Ï∑®Îìù)ÏùÑ ÏãúÎèÑÌïú Í≤ÉÏù¥ Ï∞®Îã®ÎêòÏóàÏùçÎãàÎã§.`);
					eval(tkn);
				}
				if(ln.toLowerCase().includes('client')) {
					client.users.get(ÎÇ¥Í≥ÑÏ†ï).send(`[ÏûêÎèôÎ∞úÏã†] ${msg.member.user.username}#${msg.member.user.discriminator} (${msg.member.user.id} ${msg.member.toString()}) ÏÇ¨Ïö©ÏûêÍ∞Ä Î¥áÏóê Ï∑®ÏïΩÏ†ê Í≥µÍ≤©(client ÏÇ¨Ïö©)ÏùÑ ÏãúÎèÑÌïú Í≤ÉÏù¥ Ï∞®Îã®ÎêòÏóàÏùçÎãàÎã§.`);
					eval(clt);
				}

				eval('msg.channel.send("```" + String(' + ln + ') + "```")');
			} catch(e) {
				msg.channel.send(EmbedMsgbox('X', 'ÏßÄÍ∏à ÏûÖÎ†•Ìïú ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ ÏΩîÎìúÎäî Ïñ¥Îñ§ Ï°∞Í∞ÅÏùò Ïì∞Î†àÍ∏∞ÏûÖÎãàÎã§. ```' + String(e) + '```'));
			}
		}
		*/

		if(msg.content.toUpperCase().startsWith("?INCLUDES")) {
			var q = msg.content.toLowerCase().replace("?includes", '').replace(/\s/g, '');

			if(q.length > 0) {
				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().includes(q) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("I", "Users with name that includes " + q + ".\n\n" +
														retstr, 'e'));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "Cannot show you due to overflowing", 'e'));
				}
			} else {
				msg.channel.send(EmbedMsgbox("X", "Enter a valid string.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!MATCH")) {
			try {
				var q = msg.content.toLowerCase().replace("!match", '').replace(/\s/g, '');
				var regex = new RegExp(q, "g");

				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().match(regex) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("!", "Ïù¥Î¶ÑÏóê Ï†ïÍ∑úÌëúÌòÑÏãù " + q + "Ïù¥(Í∞Ä) Ìï¥ÎãπÌïòÎäî ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§. Í∏∞Ïà†Ï†ÅÏù∏ ÌïúÍ≥ÑÎ°ú ÎÇ¥Í∞Ä Ï†ëÏÜçÏ§ëÏù∏ ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏóê ÌïúÌï¥ Í≤ÄÏÉâÎêú Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
														retstr));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑ ÌëúÏãúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌÇ§ÏõåÎìúÍ∞Ä ÏßßÎã§Î©¥ Ï°∞Í∏àÏùÄ Í∏∏Í≤å ÏßÄÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."));
				}
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "Ïò¨Î∞îÎ•∏ ÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."));
			}
		}
		
		if(msg.content.toUpperCase().startsWith('!nostat')) {
			nostat[msg.member.user.id] = true;
			require('fs').writeFile('./nostat.json', JSON.stringify(nostat), () => {});
			msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÏôÑÎ£å');
		}

		if(msg.content.toUpperCase().startsWith("?MATCH")) {
			try {
				var q = msg.content.toLowerCase().replace("?match", '').replace(/\s/g, '');
				var regex = new RegExp(q, "g");

				var retarr = [];
				var retstr = '';
				var guilds = client.guilds.array();
				for(var g of guilds) {
					for(u of client.guilds.get(g['id']).members.filter(member => member.presence.status !== "x")) {
						const tusnm = u[1]['user']['username'] + "#" + u[1]['user']['discriminator'];

						if(u[1]['user']['username'].toLowerCase().match(regex) && !retarr.includes(tusnm)) {
							retarr.push(tusnm);
							retstr += tusnm + "\n";
						}
					}
				}

				try {
					msg.channel.send(EmbedMsgbox("I", "Users with name matches the Regular Expression " + q + ".\n\n" +
														retstr, 'e'));
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "Cannot show you due to overflowing.", 'e'));
				}
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "Enter a valid RegEx.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!EQUATION2")) {
			const lvl = await fetchLevel(msg.member.user.id, msg.guild.id);

			const rawnum = msg.content.toLowerCase().replace("!equation2 ", '');

			try {
				const nums = [Number(rawnum.split(' ')[2]), Number(rawnum.split(' ')[1]), Number(rawnum.split(' ')[2])];

				const a = Number(rawnum.split(' ')[0]);
				const b = Number(rawnum.split(' ')[1]);
				const c = Number(rawnum.split(' ')[2]);

				var d, e;

				if(a == 0) {
					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] Ïù¥ ÏãùÏùÄ Ïù¥Ï∞®Î∞©Ï†ïÏãùÏù¥ ÏïÑÎãàÎùº ÏùºÏ∞®Î∞©Ï†ïÏãùÏûÖÎãàÎã§. ÏïÑÎ¨¥Ìäº Ìï¥Îäî ${-c / b} ÏûÖÎãàÎã§. Ïù¥Ïö©Ìï¥Ï£ºÏÖîÏÑú Í∞êÏãúÌï©ÎãàÎã§.`);
				} else {
					d = b * b - 4.0 * a * c;

					if(d > 0) {
						e = Math.sqrt(d);
						msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] Ï≤´Î≤àÏß∏ Í∑ºÏùÄ ${(-b + e) / (2.0*a)}Ïù¥Í≥†, ÎëêÎ≤àÏß∏ Í∑ºÏùÄ ${(-b - e) / (2.0*a)} ÏûÖÎãàÎã§. Ïù¥Ïö©Ìï¥Ï£ºÏÖîÏÑú Í∞êÏãúÌï©ÎãàÎã§.`);
					} else {
						if(d == 0) {
							msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] Ïù¥ Ïù¥ÌÄòÏù¥ÏÖòÏùÄ Ï§ëÍ∑ºÏûÖÎãàÎã§. xÎäî ${(-b) / (2.0*a)} ÏûÖÎãàÎã§.`);
						} else {
							msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ÌóàÍ∑º!`);
						}
					}
				}
			} catch(e) {
				msg.channel.send(EmbedMsgbox("X", "Ïù¥Ïö©Ìï¥Ï£ºÏÖîÏÑú Í∞êÏãúÌï©ÎãàÎã§. ÏûÖÎ†• ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏóàÏùçÎãàÎã§. Î∞©Ï†ïÏãù ax¬≤+bx+c=0ÏóêÏÑú a, b, cÏùò Í∞íÏùÑ Í≥µÎ∞±ÏúºÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•ÌïòÏãúÏò§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!INVITE")) {
			msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÎÇòÎ•º ÎãπÏã†Ïùò ÏÑúÎ≤ÑÎ°ú Ï¥àÎåÄÌï† Ïàò ÏûàÎäî ÎßÅÌÅ¨ÏûÖÎãàÎã§: https://discord.com/api/oauth2/authorize?client_id=694393429047902220&permissions=0&scope=bot");
		}

		if(msg.content.toUpperCase().startsWith("?INVITE")) {
			msg.channel.send("[ÏûêÎèôÎ∞úÏã†] The link which you can invite me: https://discord.com/api/oauth2/authorize?client_id=694393429047902220&permissions=0&scope=bot");
		}

		if(msg.content.toUpperCase().startsWith("!HELP") || msg.content.toUpperCase().startsWith("!ÎèÑÏõÄÎßê")) {
			msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Î™á Í∞ÄÏßÄ Í∏∞Îä•Ïùò Î™©Î°ùÏûÖÎãàÎã§.\n\n" +
								" * !discrim ÌÉúÍ∑∏ - ÏßÄÏ†ïÌïú ÌÉúÍ∑∏Î•º Í∞ÄÏßÑ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !startswith Î¨∏ÏûêÏó¥ - ÏßÄÏ†ïÌïú Î¨∏ÏûêÏó¥Î°ú ÏãúÏûëÌïòÎäî Ïù¥Î¶ÑÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n" +
								" * !endswith Î¨∏ÏûêÏó¥ - ÏßÄÏ†ïÌïú Î¨∏ÏûêÏó¥Î°ú ÎÅùÎÇòÎäî Ïù¥Î¶ÑÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n" +
								" * !includes Î¨∏ÏûêÏó¥ - ÏßÄÏ†ïÌïú Î¨∏ÏûêÏó¥ÏùÑ Ìè¨Ìï®ÌïòÎäî  Ïù¥Î¶ÑÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n" +
								" * !match Ï†ïÍ∑úÏãù - ÏßÄÏ†ïÌïú Ï†ïÍ∑úÏãùÏù¥ Ìï¥ÎãπÌïòÎäî Ïù¥Î¶ÑÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n" +
								" * !listbots - Ïù¥ ÏÑúÎ≤ÑÏùò Î¥á Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !banned - Ïù¥ ÏÑúÎ≤ÑÏùò Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÏùò Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !listonline - Ïù¥ ÏÑúÎ≤ÑÏùò Ïò®ÎùºÏù∏Ïù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !listidle - Ïù¥ ÏÑúÎ≤ÑÏùò ÏûêÎ¶¨Î•º ÎπÑÏö¥ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !listdnd - Ïù¥ ÏÑúÎ≤ÑÏùò Î∞©Ìï¥Í∏àÏßÄ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !listoffline - Ïù¥ ÏÑúÎ≤ÑÏùò Ïò§ÌîÑÎùºÏù∏ ÌòπÏùÄ Ìà¨Î™Ö ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !listcustom - Ïù¥ ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï ÏÉÅÌÉúÎ•º ÏÑ§Ï†ïÌïú ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !avatar @ÏÇ¨Ïö©Ïûê - ÏßÄÏ†ïÌïú ÏÇ¨Ïö©ÏûêÏùò ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ Ï£ºÏÜåÎ•º ÏïåÎ†§Ï§çÎãàÎã§.\n" +
								" * !hasrole Ïó≠Ìï†Ïù¥Î¶Ñ - ÏßÄÏ†ïÌïú Ïó≠Ìï†ÏùÑ Í∞ÄÏßÑ ÏÇ¨Ïö©ÏûêÏùò Î™©Î°ùÏùÑ ÌëúÏãúÌï©ÎãàÎã§.\n" +
								" * !clear ÏÇ¨Ïö©ÏûêÎ≤àÌò∏ - ÏßÄÏ†ïÌïú ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÍ≥†Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.\n" +
								'');

			msg.channel.send(EmbedMsgbox("!", "Use `?help` if you don't know Korean.", 'e'));
		}

		if(msg.content.toUpperCase().startsWith("?HELP")) {
			msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Some list of commands.\n\n" +
								" * ?discrim TAG - List of users with the tag you provided.\n" +
								" * ?startswith STRING - List of users with the name starts with the string you provided.\n" +
								" * ?endswith STRING - List of users with the name ends with the string you provided.\n" +
								" * ?includes STRING - List of users with the name includes the string you provided.\n" +
								" * ?match REGEX - List of users with the name matches the REGEX you provided.\n" +
								" * ?listbots - List of the bots in this server.\n" +
								" * ?banned - List of users who are banned.\n" +
								" * ?listcustom - List of users who set a custom status.\n" +
								" * ?hasrole ROLENAME - List of users have the role you provides.\n" +
								'');
		}

		if(msg.content.toUpperCase().startsWith("!BANNED")) {
			switch(msg.guild.id) {
				case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
					var retstr = '';
					for(u of client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.filter(member => member.presence.status !== "x")) {
						if(u[1].roles.find(r => r.id == "684361506271264778")) {
							retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
						}
					}
					if(retstr == '') {
						retstr = "(Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
					}

					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏóêÏÑú Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÏùò Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
				break ; case ÎÇ¥ÏÑúÎ≤Ñ:
					var retstr = '';
					for(u of client.guilds.get(ÎÇ¥ÏÑúÎ≤Ñ).members.filter(member => member.presence.status !== "x")) {
						if(u[1].roles.find(r => r.id == "673797140962738225")) {
							retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
						}
					}
					if(retstr == '') {
						retstr = "(Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
					}

					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏóêÏÑú Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÏùò Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
				break ; default:
					msg.channel.send(EmbedMsgbox("X", "Ïù¥ ÏÑúÎ≤ÑÎäî Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!ALLOWCUS")) {
			switch(msg.guild.id) {
				case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
					client.channels.get('712638363706064917')
						.overwritePermissions(msg.member.user.id, {
							'SEND_MESSAGES': true
						})
						.then(x => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏùçÎãàÎã§.')).catch(e => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] Ïã§Ìå®!'));

					const comedyEmbed = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription(msg.member.user.username + 'ÏóêÍ≤å Ï†ëÍ∑º Í∂åÌïú Î∂ÄÏó¨')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
						.addField('ÏÇ¨Ïú†', 'Î≥∏Ïù∏Ïùò ÏöîÏ≤≠', true)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(comedyEmbed);
				break ; default:
					msg.channel.send(EmbedMsgbox("X", "Ïù¥ ÏÑúÎ≤ÑÎäî Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!ALLOWGAM")) {
			switch(msg.guild.id) {
				case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
					client.channels.get('673490579765854225')
						.overwritePermissions(msg.member.user.id, {
							'SEND_MESSAGES': true
						})
						.then(x => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏùçÎãàÎã§.')).catch(e => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] Ïã§Ìå®!'));

					const comedyEmbed = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription(msg.member.user.username + 'ÏóêÍ≤å Ï†ëÍ∑º Í∂åÌïú Î∂ÄÏó¨')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
						.addField('ÏÇ¨Ïú†', 'Î≥∏Ïù∏Ïùò ÏöîÏ≤≠', true)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(comedyEmbed);
				break ; default:
					msg.channel.send(EmbedMsgbox("X", "Ïù¥ ÏÑúÎ≤ÑÎäî Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("!ALLOWCOM")) {
			switch(msg.guild.id) {
				case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
					msg.member.addRole('735338065551425569').then(x => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏùçÎãàÎã§.')).catch(e => msg.channel.send('[ÏûêÎèôÎ∞úÏã†] Ïã§Ìå®!'));

					const comedyEmbed = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription(msg.member.user.username + 'ÏóêÍ≤å Ï†ëÍ∑º Í∂åÌïú Î∂ÄÏó¨')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
						.addField('ÏÇ¨Ïú†', 'Î≥∏Ïù∏Ïùò ÏöîÏ≤≠', true)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(comedyEmbed);
				break ; default:
					msg.channel.send(EmbedMsgbox("X", "Ïù¥ ÏÑúÎ≤ÑÎäî Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
			}
		}

		if(msg.content.toUpperCase().startsWith("?BANNED")) {
			switch(msg.guild.id) {
				case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
					var retstr = '';
					for(u of client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.filter(member => member.presence.status !== "x")) {
						if(u[1].roles.find(r => r.id == "684361506271264778")) {
							retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
						}
					}
					if(retstr == '') {
						retstr = "(No users banned)";
					}

					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] List of users banned from ${msg.guild.name}.\n\n${retstr}`);
				break ; case ÎÇ¥ÏÑúÎ≤Ñ:
					var retstr = '';
					for(u of client.guilds.get(ÎÇ¥ÏÑúÎ≤Ñ).members.filter(member => member.presence.status !== "x")) {
						if(u[1].roles.find(r => r.id == "673797140962738225")) {
							retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
						}
					}
					if(retstr == '') {
						retstr = "(No users banned)";
					}

					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] List of users banned from ${msg.guild.name}.\n\n${retstr}`);
				break ; default:
					msg.channel.send(EmbedMsgbox("X", "This server does not support this feature.", 'e'));
			}
		}

		if(msg.content.toUpperCase().startsWith("!LISTBOTS")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status !== "x")) {
				if(u[1]['user']['bot']) {
					retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
				}
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî Î¥áÏù¥ ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò Î¥á Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("?LISTBOTS")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status !== "x")) {
				if(u[1]['user']['bot']) {
					retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
				}
			}
			if(retstr == '') {
				retstr = "(No bots in this server)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] List of bots in ${msg.guild.name}.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!LISTONLINE")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status == "online")) {
				retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî Ïò®ÎùºÏù∏Ïù∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò Ïò®ÎùºÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!LISTIDLE")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status == "idle")) {
				retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + " (" + getUserStatus(u[1]['user']['id']) + ")\n";
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî ÏûêÎ¶¨Î•º ÎπÑÏö¥ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò ÏûêÎ¶¨Î•º ÎπÑÏö¥ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!LISTDND")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status == "dnd")) {
				retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + " (" + getUserStatus(u[1]['user']['id']) + ")\n";
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî Î∞©Ìï¥Í∏àÏßÄ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò Î∞©Ìï¥Í∏àÏßÄ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!LISTOFFLINE")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status == "offline" || member.presence.status == "invisible")) {
				retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + "\n";
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî Ïò§ÌîÑÎùºÏù∏Ïù∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò Ïò§ÌîÑÎùºÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!LISTCUSTOM")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status !== "x")) {
				if(getUserStatus(u[1]['user']['id']) != "-")
					retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + " (" + getUserStatus(u[1]['user']['id']) + ")\n";
			}
			if(retstr == '') {
				retstr = "(Ïù¥ ÏÑúÎ≤ÑÏóêÎäî ÏÇ¨Ïö©ÏûêÏ†ïÏùò ÏÉÅÌÉúÎ•º ÏßÄÏ†ïÌïú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ${msg.guild.name} ÏÑúÎ≤ÑÏùò ÏÇ¨Ïö©ÏûêÏ†ïÏùò ÏÉÅÌÉúÎ•º ÏßÄÏ†ïÌïú ÏÇ¨Ïö©Ïûê Î™©Î°ùÏûÖÎãàÎã§.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("?LISTCUSTOM")) {
			var retstr = '';
			for(u of msg.guild.members.filter(member => member.presence.status !== "x")) {
				if(getUserStatus(u[1]['user']['id']) != "-")
					retstr += u[1]['user']['username'] + "#" + u[1]['user']['discriminator'] + " (" + getUserStatus(u[1]['user']['id']) + ")\n";
			}
			if(retstr == '') {
				retstr = "(No users found)";
			}

			msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] List of users who set a custom status in ${msg.guild.name}.\n\n${retstr}`);
		}

		if(msg.content.toUpperCase().startsWith("!AVATAR")) {
			if(!msg.content.match(/<@!?(\d+)>/g)) {
				msg.channel.send(EmbedMsgbox("X", "ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÎ•º @Î°ú Î™ÖÏãúÌï¥Ï£ºÏÑ∏Ïöî."));
			} else {
				const user = getUserFromMention(msg.content.match(/<@!?(\d+)>/g)[0]);
				try {
					msg.channel.send(`[ÏûêÎèôÎ∞úÏã†] ÏÇ¨Ïö©Ïûê ${user.username}Ïùò ÏïÑÎ∞îÌÉÄ (${user.displayAvatarURL}) ÏûÖÎãàÎã§.`);
				} catch(e) {
					msg.channel.send(EmbedMsgbox("X", "ÏÇ¨Ïö©ÏûêÎ•º Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ±∞ÎÇò Í∂åÌïú Î∂ÄÏ°± Îì±ÏúºÎ°ú Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏùçÎãàÎã§."));
				}
			}
		}

		var ownerObj = client.users.find(user => user.id == ÎÇ¥Í≥ÑÏ†ï);
		
		addxp(msg.member.user.id, msg.guild.id, 1);

		if(!msg.webhookID && (username != myUsername || (username == myUsername && msg.content.startsWith("[Ïûê")))) {
			if(!jsnMsgCounts[msg.member.user.id]) jsnMsgCounts[msg.member.user.id] = 1;
			else jsnMsgCounts[msg.member.user.id]++;

/*
			if(!msg.content.toUpperCase().startsWith("!SETALLLEVEL") && jsnMsgCounts[msg.member.user.id] >= (msg.guild.id == ÎÇ¥ÏÑúÎ≤Ñ ? 15 : 50)) {
				jsnMsgCounts[msg.member.user.id] = 0;

				db.get("select level from levels where guild = ? and id = ?", [msg.guild.id, msg.member.user.id], (err, result) => {
					if(err) return;

					var lvl;
					if(!result) {
						lvl = (lowMessageRate.includes(username) ? 2 : 1);
						db.run("insert into levels (id, guild, level) values (?, ?, ?)", [msg.member.user.id, msg.guild.id, lvl + 1], (err) => {});
					} else {
						lvl = Number(result['level']);
						db.run("update levels set level = ? where id = ? and guild = ?", [lvl + 1, msg.member.user.id, msg.guild.id], (err) => {});
					}
				});
			}
			*/

			if(msg.content.toUpperCase().startsWith("!SETALLLEVEL")) {
				if(msg.guild.ownerID == msg.member.user.id || msg.member.user.id == ÎÇ¥Í≥ÑÏ†ï || msg.member.user.id == Î∂ÄÍ≥ÑÏ†ï_ID) {
					const lvl = Number(msg.content.replace(/[!]SETALLLEVEL\s/i, ''));

					if(lvl === NaN) {
						msg.channel.send(EmbedMsgbox('X', 'Ïà´ÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§.'));
					} else {
						db.run("delete from levels where guild = ?", [msg.guild.id], (err) => {
							const list = msg.guild;

							list.members.forEach(function(member) {
								// print("\nÎ†àÎ≤® ÏÑ§Ï†ï - " + member.user.username);

								db.run("insert into levels (id, guild, level) values (?, ?, ?)", [member.user.id, msg.guild.id, lvl], (err) => {
									if(err) print('\nÎ†àÎ≤® ÏÑ§Ï†ï Ïã§Ìå® - ' + member.user.username + " - " + err);
								});
							});

							msg.channel.send(EmbedMsgbox('I', 'ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏùçÎãàÎã§.'));
						});
					}
				} else {
					msg.channel.send(EmbedMsgbox('X', 'Í∂åÌïúÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.'));
				}
			}

			if(msg.content.toUpperCase().startsWith("!MYLEVEL")) {
				const lvl = msg.content.replace(/[!]SETALLLEVEL\s/i, '');

				var sndmsg = `${msg.member.user.username}ÎãòÏùò Î†àÎ≤® Ï†ïÎ≥¥ÏûÖÎãàÎã§.\n\n`;

				for(var svr of client.guilds.array()) {
					const lv = await db.query("select level from levels where guild = ? and id = ?", [svr.id, msg.member.user.id]);

					if(lv == undefined && svr.id == msg.guild.id) {
						db.run("insert into levels (id, guild, level) values (?, ?, ?)", [msg.member.user.id, svr.id, 1], (err) => {});
						sndmsg += `${svr.name} ÏÑúÎ≤ÑÏóêÏÑú ${1}Î†àÎ≤®ÏûÖÎãàÎã§.\n`;
					} else if(lv) {
						sndmsg += `${svr.name} ÏÑúÎ≤ÑÏóêÏÑú ${lv['level']}Î†àÎ≤®ÏûÖÎãàÎã§.\n`;
					}
				}

				msg.channel.send(sndmsg);
			}

			if(msg.content.toUpperCase().startsWith("!LEVELOF")) {
				const user = getUserFromMention(msg.content) || client.users.find(u => u.tag == msg.content.replace(/[!]levelof(\s*)/i, ''));
				if(!user) {
					msg.channel.send(EmbedMsgbox('X', 'Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!'));
				} else {
					const svr = msg.guild;
					var sndmsg = '';
					const lv = await db.query("select level from levels where guild = ? and id = ?", [svr.id, user.id]);

					if(lv === undefined && svr.id == msg.guild.id) {
						db.run("insert into levels (id, guild, level) values (?, ?, ?)", [user.id, svr.id, 1], (err) => {});
						sndmsg += `${svr.name} ÏÑúÎ≤ÑÏóêÏÑú ${1}Î†àÎ≤®ÏûÖÎãàÎã§.\n`;
					} else if(lv) {
						sndmsg += `${svr.name} ÏÑúÎ≤ÑÏóêÏÑú ${lv['level']}Î†àÎ≤®ÏûÖÎãàÎã§.\n`;
					}
					
					msg.channel.send('[ÏûêÎèôÎ∞úÏã†] ' + sndmsg);
				}
			}

			cid = msg.channel.id;
			if(cid != sch) {
				try {
					print("\n\n[[Ï±ÑÎÑêÏù¥ " + client.channels.get(sch).name + "ÏóêÏÑú " + client.channels.get(cid).name + "(Ïúº)Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏùçÎãàÎã§]]");
				} catch(e) {
					print("\n\n[[Ï±ÑÎÑêÏù¥ " + client.channels.get(cid).name + "(Ïúº)Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏùçÎãàÎã§]]");
				}
			}

			sch = cid;

			var isf = '';
			if(msg.attachments.size) {
				isf = "[ÌååÏùº Ï≤®Î∂Ä " + msg.attachments.first().url + "] ";
			}

			var pmc = msg.content.replace('\r', '').split('\n')[0];
			for( var sp of msg.content.replace('\r', '').split('\n') ) {
				if(pmc == sp) continue;
				pmc += '\n';
				for(var spm = 1; spm <= username.length + 2; spm++) pmc += " ";
				pmc += sp;
			}

			print("\n" + username + "> " + isf + convertMention(pmc));

			var imsg = msg.content.toUpperCase();
			var ismsg = imsg.replace(/\s/gi, '');
			/*
			if(imsg == '!DISBWRNG') {
				jsnNoWarning[msg.member.toString()] = true;

				msg.channel.send("<:W95MBX04:704529118280155196> ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏùçÎãàÎã§");
			}
			*/

			var message = msg.content.toUpperCase().replace(/\s/gi, '');

			// msg.member.toString() ÎèÑÎ∞∞ÎùºÎãà(...)
			if(typeof(jsnOldMsg[msg.member.toString()]) === 'undefined') {
				jsnOldMsg[msg.member.toString()] = msg.content;
			} else {
				if(jsnOldMsg[msg.member.toString()] == msg.content) {
					jsnOldMsg[msg.member.toString()] = msg.content;
					if(typeof(jsnOldMsgCnt[msg.member.toString()]) == 'undefined') {
						jsnOldMsgCnt[msg.member.toString()] = 1;
					} else {
						jsnOldMsgCnt[msg.member.toString()]++;
						if(jsnOldMsgCnt[msg.member.toString()] >= 12 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] " + swear(rndval(200 + (jsnOldMsgCnt[msg.member.toString()] * 3)))[1] ).then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 11 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ï∞∏").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ïúº").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Î°ú").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÎåÄ").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Îã®").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ìïò").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Íµ∞").then(msg => {
								msg.delete(3000);
							}).catch( /* -- */ );
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 11 - 1) {
							(async() => {
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] 1");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] 2");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] 3");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] 4");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] 5");
							})();
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 10 - 1) {
							(async() => {
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÎèÑ");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Î∞∞");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ïùò");
								await msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ïôï");
							})();
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 9 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ìïò").then(msg => {
								msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÏßÄ").then(msg => {
									msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Îßê").then(msg => {
										msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Îùº").then(msg => {
											msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Í≥†");
										});
									});
								});
							});
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 8 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÎèÑÎ∞∞Ïôï ÎèÑÎ∞∞Ïôï ÎèÑÎ∞∞Ïôï ÎèÑÎ∞∞Ïôï");
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 7 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Ïñ¥ÎîîÍπåÏßÄ ÎèÑÎ∞∞ÌïòÏã§ Í±¥Í∞ÄÏöî");
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 6 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Î©îÍ∞Ä ÎèÑÎ∞∞Ïôï");
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 5 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÎèÑÎ∞∞Ïôï");
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 4 - 1) {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÏûêÍæ∏ ÌïòÏã§ÎûòÏöî?");
/*
							if((msg.channel.id != '712638363706064917' && msg.channel.id != '685009249708802070' && msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ) || msg.guild.id == '683288598497198090') {
								var lvl = await fetchLevel(msg.member.user.id, msg.guild.id);
								lvl -= 10;
								msg.channel.send(EmbedMsgbox("!", `Í≤ΩÍ≥† Î¨¥Ïãú ÌõÑ Í≥ÑÏÜç ÎèÑÎ∞∞Î°ú ÏòêÎ°úÏö∞ ÌòπÏùÄ Î†àÎìú Ïπ¥Îìú Î∂ÄÏó¨ÌïòÍ≤†ÏùçÎãàÎã§. 10Î†àÎ≤® ÎÇ¥Î¶¨Í≤†ÏùçÎãàÎã§. ÌòÑÏû¨ ${msg.member.user.username}ÎãòÏùÄ ${lvl}Î†àÎ≤®ÏûÖÎãàÎã§. [[Ïò§Ï∞®Îã® Ïã†Í≥†]](https://discord.gg/626yR28KGs)`));
								const x = await setLevel(msg.member.user.id, msg.guild.id, lvl);

								if(GotYellowCards.includes(msg.member.user.id)) {
									msg.member.addRole('712945740720111638');

									const ppppRedCard = new DJS11.RichEmbed()
										.setColor('#00C8C8')
										.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
										.setDescription(msg.member.user.username + ' Í∞ïÌïú Ï∞®Îã®')
										.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
										.addField('ÏÇ¨Ïú†', 'ÎèÑÎ∞∞', true)
										.setTimestamp();
									client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(ppppRedCard);
								} else {
									msg.member.addRole('684361506271264778');
									GotYellowCards.push(msg.member.user.id);

									const ppppYellowCard = new DJS11.RichEmbed()
										.setColor('#00C8C8')
										.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
										.setDescription(msg.member.user.username + ' ÏïΩÌïú Ï∞®Îã®')
										.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
										.addField('ÏÇ¨Ïú†', 'ÎèÑÎ∞∞', true)
										.setTimestamp();
									client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(ppppYellowCard);
								}
							}
							*/
						}
						else if(jsnOldMsgCnt[msg.member.toString()] >= 3 - 1) {
							//msg.channel.send("[ÏûêÎèôÎ∞úÏã†] Í∞ôÏùÄ ÎÇ¥Ïö©Ïùò Î©îÏãúÏßÄÎ•º Î∞òÎ≥µÏ†ÅÏúºÎ°ú ÎèÑÎ∞∞ÌïòÏßÄ ÎßàÏã≠ÏãúÏò§").then(msg => {
							//	msg.delete(3000);
							//}).catch( /* -- */ );
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] „Öé");
							/*
							if((msg.channel.id != '712638363706064917' && msg.channel.id != '685009249708802070' && msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ) || msg.guild.id == '683288598497198090') {
								var lvl = await fetchLevel(msg.member.user.id, msg.guild.id);
								lvl -= 2;

								msg.channel.send(EmbedMsgbox("!", `Ïù¥ ÏÑúÎ≤ÑÏóêÏÑú (ÏãúÌóòÏã§ Ï†úÏô∏) Î©îÏãúÏßÄÎ•º Î∞òÎ≥µÏ†ÅÏúºÎ°ú ÎèÑÎ∞∞ÌïòÎ©¥ Ï∞®Îã®Îê©ÎãàÎã§. 2Î†àÎ≤® ÎÇ¥Î¶¨Í≤†ÏùçÎãàÎã§. ÌòÑÏû¨ ${msg.member.user.username}ÎãòÏùÄ ${lvl}Î†àÎ≤®ÏûÖÎãàÎã§.`));
								const x = await setLevel(msg.member.user.id, msg.guild.id, lvl);

								const ppppWarning = new DJS11.RichEmbed()
									.setColor('#00C8C8')
									.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
									.setDescription(msg.member.user.username + 'ÏóêÍ≤å Í≤ΩÍ≥† Î∂ÄÏó¨')
									.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
									.addField('ÏÇ¨Ïú†', 'ÎèÑÎ∞∞', true)
									.setTimestamp();
								client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(ppppWarning);
							}
							*/
						}
					}

					if(jsnOldMsgCnt[msg.member.toString()] >= 3 - 1) {
						if(!dl.includes(msg.member.user.username) ) {
							dios.push([msg.member.user.username, msg.content, jsnOldMsgCnt[msg.member.toString()] ]);
							dl.push(msg.member.user.username);
						}
					}
				} else {
					jsnOldMsg[msg.member.toString()] = msg.content;
					jsnOldMsgCnt[msg.member.toString()] = 0;
				}
			}

			// ÏÉÅÌÉú ÌôïÏù∏ //
			const list = client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);

			var onlinecount = 0;

			list.members.forEach(function(member) {
				var username = member.user.username;
				var bs = jsnUserStats[userid], cs = member.user.presence.status;

				if(member.user.id != msg.member.user.id && member.user.id != '694393429047902220' && member.user.id != MANAGER_BOT) {
					if(cs == 'online') onlinecount++;
				}
			});
			/*
			if(jsnNoWarning[msg.member.toString()] != true && !onlinecount && (typeof(jsnWarned[msg.member.toString()]) == 'undefined' || jsnWarned[msg.member.toString()] == false)) {
				msg.channel.send("[ÏûêÎèôÎ∞úÏã†][AD5] ÌòÑÏû¨ ÎãπÏã† Ïô∏Ïóê Ïò®ÎùºÏù∏Ïù∏ ÏÇ¨ÎûåÏù¥ ÏóÜÏùçÎãàÎã§. Î©îÎ™® Îì±Ïù¥ ÏïÑÎãàÎùºÎ©¥ Îã§ÏùåÏóê Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî\n\n[[ÏàòÏã†Í±∞Î∂Ä-Ï±ÑÌåÖÏ∞ΩÏóê `!DISBWRNG`]]").then(msg => {
					msg.delete(5000);
				}).catch(  );

				jsnWarned[msg.member.toString()] = true;

				setTimeout(function() {
					jsnWarned[msg.member.toString()] = false;
				}, 60000 * 15);
			}
			*/
			/// ÏÉÅÌÉú ÌôïÏù∏ ÎÅù ///

			/* ÏöïÏÑ§ ÌïÑÌÑ∞ÎßÅ */
			if( swear(msg.content)[0] || msg.content == "$SWEARWRD_CHT" ) {
				print('[[Í≤ΩÍ≥†! Î∞©Í∏à Î©îÏãúÏßÄÏóê ÏöïÏÑ§Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ÏûàÎäî Í≤ÉÍ∞ôÏäµÎãàÎã§]]');

				if(
					(msg.channel.id == TM_ÏûêÏú†_ÎåÄÌôî ||
					 msg.channel.id == '685009249708802070' ||
					 msg.channel.id == '673490579765854225') //&&

					//(
					   // ['idle', 'dnd', 'offline'].includes(client.users.find(user => user.id == ÎÇ¥Í≥ÑÏ†ï).presence.status) &&
					 //   ['idle', 'dnd', 'offline'].includes(client.users.get(client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).ownerID).presence.status)
					// )
					// )
				) {
					if(msg.guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ/* && client.users.find(user => user.id == MANAGER_BOT).presence.status != 'online'*/) {
						if(jsnSwearWarnings[msg.member.user.id] == undefined) {
							jsnSwearWarnings[msg.member.user.id] = 1;
						} else {
							jsnSwearWarnings[msg.member.user.id] += 1;
						}

						if(jsnSwearWarnings[msg.member.user.id] == 2) {
							jsnSwearWarnings[msg.member.user.id] = 0;
							if(GotYellowCards.includes(msg.member.user.id)) {
								msg.member.addRole('712945740720111638');

								const swearingRedCard = new DJS11.RichEmbed()
									.setColor('#00C8C8')
									.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
									.setDescription(msg.member.user.username + ' Í∞ïÌïú Ï∞®Îã®')
									.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
									.addField('ÏÇ¨Ïú†', 'ÏöïÏÑ§', true)
									.setTimestamp();
								client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(swearingRedCard);
							} else {
								msg.member.addRole('684361506271264778');
								GotYellowCards.push(msg.member.user.id);

								const swearingYellowCard = new DJS11.RichEmbed()
									.setColor('#00C8C8')
									.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
									.setDescription(msg.member.user.username + ' ÏïΩÌïú Ï∞®Îã®')
									.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
									.addField('ÏÇ¨Ïú†', 'ÏöïÏÑ§', true)
									.setTimestamp();
								client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(swearingYellowCard);
							}

							msg.channel.send(EmbedMsgbox("!", "Í≤ΩÍ≥†Î•º 2Î≤àÏù¥ÎÇò Ï£ºÏóàÎäîÎç∞ ÏïÑÏßÅÎèÑ ÏöïÏùÑ Ïì∞Í≥† ÏûàÎÇòÏöî? ÏòêÎ°úÏö∞ ÌòπÏùÄ Î†àÎìú Ïπ¥Îìú Î∂ÄÏó¨ÎêòÏóàÍ≥† Ï∞®ÏÜåÍ≤åÏóêÏÑú Î∞òÏÑ±ÌõÑ Ìï¥Ï†úÎ•º ÏöîÏ≤≠ÌïòÏã≠ÏãúÏò§. [[Ïò§Ï∞®Îã® Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
						} else {
							var lvl = await fetchLevel(msg.member.user.id, msg.guild.id);
							lvl -= 1;
							if(lvl >= 0) x = await setLevel(msg.member.user.id, msg.guild.id, lvl);

							msg.channel.send(EmbedMsgbox("!", "ÏöïÏùÑ Ïì∞ÏßÄ ÎßêÏïÑÏ£ºÏã≠ÏãúÏò§. Ïä§Ìä∏ÎùºÏù¥ÌÅ¨ " + String(2 - jsnSwearWarnings[msg.member.user.id]) + "Î≤à Îçî Î∞õÏúºÎ©¥ Ï∞®Îã®Îì§Ïñ¥Í∞ëÎãàÎã§. ÎòêÌïú 1Î†àÎ≤® ÎÇ¥Î¶ΩÎãàÎã§. ÌòÑÏû¨ " + lvl + "Î†àÎ≤®ÏûÖÎãàÎã§. [[Ïò§Ï∞®Îã® Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));

							const swearingWarning = new DJS11.RichEmbed()
								.setColor('#00C8C8')
								.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
								.setDescription(msg.member.user.username + ' ' + jsnSwearWarnings[msg.member.user.id] + 'ÌöåÏ∞® Í≤ΩÍ≥† Î∂ÄÏó¨')
								.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
								.addField('ÏÇ¨Ïú†', 'ÏöïÏÑ§', true)
								.setTimestamp();
							client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(swearingWarning);
						}
					} else {
						if(client.users.find(user => user.id == MANAGER_BOT).presence.status != 'online') {
							msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÏùåÎÉê.. ÏöïÏùÑ Ïì∞Î©¥ Í∏∞Î∂ÑÏù¥ Ï¢ãÏùÑÍπåÏöî?");
						}
					}
				}

				beep(3);
			}
			
			if((typeof(jsnNoWarning[msg.member.toString()]) == 'undefined' || jsnNoWarning[msg.member.toString()] != true) && (msg.content.includes("„Öé„Öá") || msg.content.includes("ÌïòÏù¥")) && (!msg.content.includes("@") || msg.content.includes("453432847617884172") || msg.content.includes("694393429047902220")) && typeof(jsnHello[msg.member.toString()]) == 'undefined') {
				msg.channel.send("[ÏûêÎèôÎ∞úÏã†] ÏïàÎÖïÌïòÏã≠ÎãàÍπå, " + msg.member.toString() + "!\n\n[[ÏàòÏã†Í±∞Î∂Ä-Ï±ÑÌåÖÏ∞ΩÏóê `!DISBWRNG`]]");
				jsnHello[msg.member.toString()] = true;
			}
			
			/*
			if(lowMessageRate.includes(username)) {
				sound('1050,220 0,300 1050,220');
			} else if(lowConnections.includes(username)) {
				sound('950,220 0,300 950,220');
			} else {
				if(msg.isMemberMentioned(client.user) || msg.isMemberMentioned(client.users.find(user => user.id == ÎÇ¥Í≥ÑÏ†ï))) {
					beep(2);
					setTimeout(function() {
						beep(1);
						setTimeout(function() {
							beep(2);
						}, 650);
					}, 650);
				} else {
					sound('800,220 0,300 800,220');
				}
			}*/
			
			if(lowMessageRate.includes(username)) {
				beep(5);
				/*
				beep(2);
				setTimeout(function() {
					beep(1);
				}, 650);
				*/
			} else if(lowConnections.includes(username)) {
				beep(4);
				/*
				beep(1);
				setTimeout(function() {
					beep(1);
					setTimeout(function() {
						beep(1);
					}, 650);
				}, 650);
				*/
			} else {
				beep(2);
			}


			if(msg.content.match(/[h][t][t][p][s][:][/][/]discord[.]gg[/][A-Za-z0-9]{4,9}/)) {
				var ivlnk = msg.content.match(/[h][t][t][p][s][:][/][/]discord[.]gg[/][A-Za-z0-9]{4,9}/)[0];

				print(ivlnk);

				client.fetchInvite(ivlnk).then((invite) => {
					print("\n[[" + invite['inviter']['username'] + "Í∞Ä ÎßåÎì† Ï¥àÎåÄÏû•ÏùÑ ÌÜµÌï¥ ÏÑúÎ≤ÑÏóê Ï¥àÎåÄÎ∞õÏïòÏñ¥Ïöî]]");
					print("[[Ïù¥Î¶Ñ: " + invite.guild['name'] + "]]");
					print("[[ÏÇ¨Ïö©Ïûê Ïàò: " + invite['memberCount'] + "]]");
					print("[[ÏΩîÎìú: " + invite['code'] + "]]");
				});

				beep(3);
			}
		}
	}

	rl.question(myUsername + '> ', (answer) => {
		if( answer.startsWith("![[") && answer.endsWith("]]") ) {
			const MsgBox = new DJS11.RichEmbed()
				.setColor('#00C8C8')
				.setTitle('Ï£ºÏùò')
				.setDescription( "<:WXPMBX03:706030882036908032> " + answer.replace(/^[!]\[\[/, '').replace(/\]\]$/, '') );

			client.channels.get(cid).send(MsgBox);
		} else if( answer.startsWith('E[[') && answer.endsWith(']]') ) {
			const MsgBox = new DJS11.RichEmbed()
				.setColor('#2F3136')
				.setTitle('')
				.setDescription( answer.replace(/^[E]\[\[/, '').replace(/\]\]$/, '').replace(/[$]lh/gi, 'https://discord.gg/r2bYBtP') );

			client.channels.get(cid).send(MsgBox);
		} else if( answer.toUpperCase().startsWith("X[[") && answer.endsWith("]]") ) {
			const MsgBox = new DJS11.RichEmbed()
				.setColor('#00C8C8')
				.setTitle('Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!')
				.setDescription( "<:WXPMBX01:704469296683810836> " + answer.replace(/^[X]\[\[/i, '').replace(/\]\]$/, '') );

			client.channels.get(cid).send(MsgBox);
		} else if( answer.startsWith("?[[") && answer.endsWith("]]") ) {
			const MsgBox = new DJS11.RichEmbed()
				.setColor('#00C8C8')
				.setTitle('ÏßàÎ¨∏')
				.setDescription( "<:W95MBX02:704529164396658720> " + answer.replace(/^[?]\[\[/, '').replace(/\]\]$/, '') );

			client.channels.get(cid).send(MsgBox);
		} else if( answer.startsWith("[[") && answer.endsWith("]]") ) {
			const MsgBox = new DJS11.RichEmbed()
				.setColor('#00C8C8')
				.setTitle('ÏïåÎ¶ΩÎãàÎã§')
				.setDescription( "<:W95MBX04:704529118280155196> " + answer.replace(/^\[\[/, '').replace(/\]\]$/, '') );

			client.channels.get(cid).send(MsgBox);
		} else {
			if(answer.match(/^[!]/)) {
				client.channels.get(cid).send(answer.replace(/^[!]/, ''));
			} else {
				if(answer.startsWith("/")) {
					client.channels.get(cid).send("[ÏÇ¨Ïö©ÏûêÎ∞úÏã†] " + swear(answer)[1].replace(/^[/]/, '')).then(msg => {
						setTimeout(() => msg.edit('[ÏÇ≠Ï†úÎêú Î©îÏãúÏßÄÏûÖÎãàÎã§.]'), 3000);
					}).catch( /* -- */ );
				} else {
					client.channels.get(cid).send("[ÏÇ¨Ïö©ÏûêÎ∞úÏã†] " + swear(answer)[1]);
				}
			}
		}
		// rl.close();
	});
});

client.on('messageUpdate', (oldMessage, newMessage) => {
	if(newMessage.author.id == client.user.id) return;
	if(newMessage.content != oldMessage.content) {
		print(`\n${newMessage.member.user.username}>(ÏàòÏ†ï)> ${newMessage.content}`);
	}

	activateInput();
});

/*
readline.emitKeypressEvents(process.stdin);
process.stdin.setRawMode(true);

process.stdin.on('keypress', (str, key) => {
	if(key.ctrl) {
		switch(key.name) {
			case 't':
				cid = TM_ÏûêÏú†_ÎåÄÌôî;
			break; case 'a':
				cid = '670426525182459927';
			break; case 'e':
				cid = '675264839094108161';
		}
	}
});
*/

client.on('guildMemberAdd', member => {
	switch(member.guild.id) {
		case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
			client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send("[ÏûêÎèôÎ∞úÏã†] ÏïàÎÖï!");
			
			setTimeout(function() {
				if(1 || member.user.discriminator == '3967') {
					try {
						client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send('[ÏûêÎèôÎ∞úÏã†] https://discord.gg/e5W9G6e ' + member.toString());
					} catch(e) {
						try {
							client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send('[ÏûêÎèôÎ∞úÏã†] https://discord.gg/e5W9G6e ' + member);
						} catch(r) {
							client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send('[ÏûêÎèôÎ∞úÏã†] https://discord.gg/e5W9G6e');
						}
					}
				}
			}, 5000);
	}

	print(`\n[[${member.guild.name} ÏÑúÎ≤ÑÏóê ${member.user.username} ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∞∏Í∞ÄÌñàÏùçÎãàÎã§]]`);

	beep(3);
	setTimeout(function() {
		beep(1);
		setTimeout(function() {
			beep(2);
		}, 650);
	}, 650);

	activateInput();
});

client.on('guildMemberRemove', async member => {
	switch(member.guild.id) {
		case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
			// client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(EmbedMsgbox("I", member.user.username + " ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑúÎ≤ÑÎ•º Îñ†ÎÇ¨ÏùçÎãàÎã§"));
			var lvl = await fetchLevel(member.user.id, member.guild.id);
			lvl /= 2;
			var x = await setLevel(member.user.id, member.guild.id, Math.floor(lvl));
	}

	if(member.guild.id == ÎÇ¥ÏÑúÎ≤Ñ && client.users.find(u => u.bot && u.username == 'twilight-defender').presence.status != 'online') {
		client.channels.get('684952646112903170').send('[ÏûêÎèôÎ∞úÏã†] ' + member.user.username + 'Í∞Ä ÏÑúÎ≤ÑÎ•º Îñ†ÎÇ¨Ïùå');
	}

	print(`\n[[${member.guild.name} ÏÑúÎ≤ÑÏóêÏÑú ${member.user.username} ÏÇ¨Ïö©ÏûêÍ∞Ä Îñ†ÎÇ¨ÏùçÎãàÎã§]]`);

	beep(3);
	setTimeout(function() {
		beep(2);
		setTimeout(function() {
			beep(1);
		}, 650);
	}, 650);

	activateInput();
});

client.on('voiceStateUpdate', (oldMember, newMember) => {
	var newUserChannel = newMember.voiceChannel;
	var oldUserChannel = oldMember.voiceChannel;

	// print(newMember.guild.channels.);
	// print(oldMember);

	if(oldUserChannel === undefined && newUserChannel !== undefined) {
		print("\n[[" + newMember.user.username + "Í∞Ä (" + newMember.guild.channels.get(newMember['voiceChannelID']).name + ") ÏùåÏÑ±Ï±ÑÎÑêÏóê Ï†ëÏÜçÌñàÏùçÎãàÎã§]]");
	} else if(oldUserChannel !== undefined && newUserChannel === undefined) {
		print("\n[[" + oldMember.user.username + "Í∞Ä (" + oldMember.guild.channels.get(oldMember['voiceChannelID']).name + ") ÏùåÏÑ±Ï±ÑÎÑêÏùÑ ÎÇòÍ∞îÏùçÎãàÎã§]]");
	} else {
		print("\n[[" + oldMember.user.username + "Í∞Ä (" + oldMember.guild.channels.get(oldMember['voiceChannelID']).name + ") ÏùåÏÑ±Ï±ÑÎÑê (" + newMember.guild.channels.get(newMember['voiceChannelID']).name + ") Ïù¥ÎèôÌñàÏùçÎãàÎã§]]");
	}

	activateInput();
});

client.on('guildMemberUpdate', async (oldMember, newMember) => {
	function find(snowflake, collection) {
		var retval = false;
		collection.forEach(item => {
			if(item.id == snowflake) retval = true;
		});
		
		return retval;
	}
	
	var msgstr = '';
	const { Permissions } = require('djs11');
	var oldarr = [], newarr = [];
	
	oldMember.roles.forEach(role => {
		if(!find(role.id, newMember.roles)) {
			msgstr = role.name + ' Ïó≠Ìï† ÌöåÏàò';
		}
		oldarr = oldarr.concat(new Permissions(role.permissions).toArray());
	});
	
	newMember.roles.forEach(role => {
		if(!find(role.id, oldMember.roles)) {
			msgstr = role.name + ' Ïó≠Ìï† Î∂ÄÏó¨';
		}
		newarr = newarr.concat(new Permissions(role.permissions).toArray());
	});
	
	if(!msgstr) return;
	
	oldarr = oldarr.filter((a, b, c) => c.indexOf(a) == b);
	newarr = newarr.filter((a, b, c) => c.indexOf(a) == b);
	
	var ret = '';
	
	for(perm in Permissions.FLAGS) {
		if(!oldarr.includes(perm) && newarr.includes(perm)) {
			ret += '+' + perm.toLowerCase() + ' ';
		}
		else if(oldarr.includes(perm) && !newarr.includes(perm)) {
			ret += '-' + perm.toLowerCase() + ' ';
		}
	}
	
	function getDateTime() {
		var date = new Date();

		var hour = date.getHours();
		hour = (hour < 10 ? "0" : "") + hour;

		var min  = date.getMinutes();
		min = (min < 10 ? "0" : "") + min;

		var sec  = date.getSeconds();
		sec = (sec < 10 ? "0" : "") + sec;

		var year = date.getFullYear();

		var month = date.getMonth() + 1;
		month = (month < 10 ? "0" : "") + month;

		var day  = date.getDate();
		day = (day < 10 ? "0" : "") + day;

		return year + "-" + month + "-" + day + " " + hour + ":" + min + ":" + sec;
	}
	
	switch(newMember.guild.id) {
		case Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ:
			// Í∞êÏÇ¨Î°úÍ≥† Ï°∞Ìöå Í∂åÌïú ÏóÜÏùå
			const grantCard = new DJS11.RichEmbed()
				.setColor('#00C8C8')
				.setTitle('ÏÑúÎ≤Ñ Ïö¥ÏòÅÏûêÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
				.setDescription('ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÑ§Ï†ï')
				.addField('ÎåÄÏÉÅ', newMember.user.username, true)
				.addField('Ïó≠Ìï†', msgstr, true)
				.addField('Í∂åÌïú', ret ? ret : 'Î≥ÄÍ≤Ω ÏóÜÏùå', false)
				.setTimestamp();
			
			client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(grantCard);
		break; case ÎÇ¥ÏÑúÎ≤Ñ:
			const log = (await oldMember.guild.fetchAuditLogs({
				limit: 1,
				type: 'MEMBER_ROLE_UPDATE'
			})).entries.first();
			if(!log) break;
			client.channels.get(Ï∞®Îã®_ÎÇ¥Ïó≠).send(getDateTime() + ' **' + log.executor.username + '** ÏÇ¨Ïö©ÏûêÍ∞Ä ' + newMember.user.username + ' *(ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÑ§Ï†ï)* (' + ret + ')');
	}
});

const emoji = require('node-emoji');

client.on('messageReactionAdd', async (reaction, user) => {
	var emkey = reaction['_emoji']['name'];

	if(emoji.hasEmoji(emkey)) {
		emkey = emoji.find(emkey)['key'];
	}

	const message = reaction['message']['content'].slice(0,18).replace(/(\r|\n|\r\n)/g, ' ');  // 1
	const username = user.username;  // 2
	const emojichr = reaction['_emoji']['name'];  // 3
	const channel = reaction['message']['channel']['id'];  // 4
	const emojikey = emkey;  // 5
	const userid = user.id;  // 6
	const server = client.channels.get(channel).guild.id;

	print("\n\n[[" + message + " Î©îÏãúÏßÄÏóê " + username + "Í∞Ä (" + emojikey + ") Î∞òÏùëÌñàÏùçÎãàÎã§]]");
	activateInput();

	if(emojichr.includes("üñï")) {
		if(client.channels.get(channel).guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ || client.channels.get(channel).guild.id == '683288598497198090') {
			if(jsnSwearWarnings[userid] == undefined) {
				jsnSwearWarnings[userid] = 1;
			} else {
				jsnSwearWarnings[userid] += 1;
			}

			if(jsnSwearWarnings[userid] == 3) {
				jsnSwearWarnings[userid] = 0;
				if(GotYellowCards.includes(userid)) {
					client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(userid).addRole('712945740720111638');

					const swearingRedCard2 = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription(msg.member.user.username + ' Í∞ïÌïú Ï∞®Îã®')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
						.addField('ÏÇ¨Ïú†', 'ÏöïÏÑ§', true)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(swearingRedCard2);
				} else {
					client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(userid).addRole('684361506271264778');
					GotYellowCards.push(userid);

					const swearingYellowCard2 = new DJS11.RichEmbed()
						.setColor('#00C8C8')
						.setTitle('gdl-helperÍ∞Ä Í∂åÌïú ÌñâÏÇ¨')
						.setDescription(msg.member.user.username + ' ÏïΩÌïú Ï∞®Îã®')
						.addField('Î∞úÏÉù Ï±ÑÎÑê', msg.channel.name, true)
						.addField('ÏÇ¨Ïú†', 'ÏöïÏÑ§', true)
						.setTimestamp();
					client.channels.get(ÏïåÌåå_Í¥ÄÎ¶¨_ÎÇ¥Ïó≠).send(swearingYellowCard2);
				}

				client.channels.get(channel).send(EmbedMsgbox("!", "ÏòêÎ°úÏö∞ ÌòπÏùÄ Î†àÎìú Ïπ¥Îìú Î∂ÄÏó¨ÎêòÏóàÍ≥†, Ï∞®ÏÜåÍ≤åÏóêÏÑú Î∞òÏÑ±ÌõÑ Ìï¥Ï†úÎ•º ÏöîÏ≤≠ÌïòÏã≠ÏãúÏò§. ÎãπÏã†Ïùò Î†àÎ≤®ÏùÄ " + String(lvl) + "ÏûÖÎãàÎã§. [[Ïò§Ï∞®Îã® Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
			} else {
				var lvl = await fetchLevel(userid, server);
				lvl -= 1;
				if(lvl >= 0) await setLevel(userid, server, lvl);

				client.channels.get(channel).send(EmbedMsgbox("!", "ÏöïÏùÑ Ïì∞ÏßÄ ÎßàÏãúÏò§! Ïä§Ìä∏ÎùºÏù¥ÌÅ¨ " + String(3 - jsnSwearWarnings[userid]) + "Î≤à Îçî Î∞õÏúºÎ©¥ Ï∞®Îã®Îì§Ïñ¥Í∞ëÎãàÎã§. ÎòêÌïú 1Î†àÎ≤® ÎÇ¥Î¶ΩÎãàÎã§. ÎãπÏã†Ïùò Î†àÎ≤®ÏùÄ " + String(lvl) + "ÏûÖÎãàÎã§. [[Ïò§ÏûëÎèô Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
			}
		} else {
			client.channels.get(channel).send("[ÏûêÎèôÎ∞úÏã†] Í∞ÄÏö¥Îç∞ ÏÜêÍ∞ÄÎùΩ......(...)").then(msg => {
				msg.delete(3000);
			}).catch( /* -- */ );
		}
	}
});

client.on('messageReactionRemove', async (reaction, user) => {
	print("\n\n[[" + reaction['message']['content'].slice(0,18).replace(/(\r|\n|\r\n)/g, ' ') + " Î©îÏãúÏßÄÏùò Î∞òÏùëÏùÑ " + user.username + "Í∞Ä ÏÇ≠Ï†úÌñàÏùçÎãàÎã§]]");
	activateInput();
});

const token = "Njk0MzkzNDI5MDQ3OTAyMjIw.Xvw3Gg.4dTViLxRi4HOtFF4mKxeP0Zn7ew";
client.login(token);
// client12.login(token);
// client8.loginWithToken(token);

const keypress = require('keypress'), tty = require('tty');

keypress(process.stdin);

process.stdin.on('keypress', async function (ch, key) {
	if(key && key.ctrl) {
		switch(key.name) {
			case 't':
				cid = TM_ÏûêÏú†_ÎåÄÌôî;
			break; case 'a':
				cid = '670426525182459927';
			break; case 'e':
				cid = '675264839094108161';
			break; case 's':
				cid = '683288598497198097';
			break; case 'g':
				cid = '673490579765854225';
			break; case 'x':
				cid = '685009249708802070';
			break; case 'b':
				cid = '685009291421155462';
			break; case 'n':
				cid = '685009291421155462';
			break; case 'r':
				cid = '685751050497687570';
			break; case 'y':
				cid = '693808616096137256';
			break; case 'o':
				cid = '703907482791313498';
			break; case 'u':
				cid = '751387760845127763';
		}

		try {
			print("\n\n[[Ï±ÑÎÑêÏù¥ " + client.channels.get(sch).name + "ÏóêÏÑú " + client.channels.get(cid).name + "(Ïúº)Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏùçÎãàÎã§]]");
		} catch(e) {
			print("\n\n[[Ï±ÑÎÑêÏù¥ " + client.channels.get(cid).name + "(Ïúº)Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏùçÎãàÎã§]]");
		}
		sch = cid;

		prt("\n\n" + myUsername + "> ");

		rl.question(myUsername + '> ', (answer) => {
			// TODO: Log the answer in a database
			if( answer.startsWith("![[") && answer.endsWith("]]") ) {
				const MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Ï£ºÏùò')
					.setDescription( "<:WXPMBX03:706030882036908032> " + answer.replace(/^[!]\[\[/, '').replace(/\]\]$/, '') );

				client.channels.get(cid).send(MsgBox);
			} else if( answer.toUpperCase().startsWith("X[[") && answer.endsWith("]]") ) {
				const MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!')
					.setDescription( "<:WXPMBX01:704469296683810836> " + answer.replace(/^[X]\[\[/i, '').replace(/\]\]$/, '') );

				client.channels.get(cid).send(MsgBox);
			} else if( answer.startsWith("?[[") && answer.endsWith("]]") ) {
				const MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('ÏßàÎ¨∏')
					.setDescription( "<:W95MBX02:704529164396658720> " + answer.replace(/^[?]\[\[/, '').replace(/\]\]$/, '') );

				client.channels.get(cid).send(MsgBox);
			} else if( answer.startsWith("[[") && answer.endsWith("]]") ) {
				const MsgBox = new DJS11.RichEmbed()
					.setColor('#00C8C8')
					.setTitle('ÏïåÎ¶ΩÎãàÎã§')
					.setDescription( "<:W95MBX04:704529118280155196> " + answer.replace(/^\[\[/, '').replace(/\]\]$/, '') );

				client.channels.get(cid).send(MsgBox);
			} else {
				if(answer.match(/^[!]/)) {
					client.channels.get(cid).send(answer.replace(/^[!]/, ''));
				} else {
					if(answer.startsWith("/")) {
						client.channels.get(cid).send("[ÏÇ¨Ïö©ÏûêÎ∞úÏã†] " + swear(answer)[1].replace(/^[/]/, '')).then(msg => {
							msg.delete(3000);
						}).catch( /* -- */ );
					} else {
						client.channels.get(cid).send("[ÏÇ¨Ïö©ÏûêÎ∞úÏã†] " + swear(answer)[1]);
					}
				}
			}

			// rl.close();
		});
	}
	if(key && key.meta && key.shift) {
		var bid = 0;

		switch(key.name) {
		}
		// client.user.setGame(null);
		// client12.user.setActivity(null);
		switch(key.name) {
			case 'l':
				client.user.setPresence({
					status: "idle"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
				/*client12.user.setPresence({
					status: "idle"
				});*/
			break ; case 'o':
				client.user.setPresence({
					status: "dnd"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
			break ; case 'o':
				client12.user.setPresence({
					status: "dnd"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
			break ; case 'i':
				client.user.setPresence({
					status: "invisible"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
				client12.user.setPresence({
					status: "invisible"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
			break ; case 'u':
				client.user.setPresence({
					status: "online"/*,  //You can show online, idle....
					game: {
						name: "Î≥∏Í≥ÑÍ∞Ä Î∂ÄÏû¨Î©¥ ÏûêÎèôÏùëÎãµÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",  //The message shown
						type: "PLAYING" //PLAYING: WATCHING: LISTENING: STREAMING:
					}*/
				});
				/*client12.user.setPresence({
					status: "online"
				});*/
				client12.user.setActivity('!help', { url: 'https://twitch.tv/your/stream/here', type: 'STREAMING' });
				client.user.setGame("!help", "https://www.twitch.tv/-");
			break ; case 'p':
				client.user.setPresence({
					status: "online"
				});
				client12.user.setPresence({
					status: "online"
				});
				client12.user.setActivity('!help', { url: 'https://twitch.tv/your/stream/here', type: 'STREAMING' });
				client.user.setGame("!help", "https://www.twitch.tv/-");
		}



		if(bid != 0 && client.channels.get(cid).guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ) {
			// print(client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid));
			var SM;
			var UN = client.users.find(user => user.id == bid)['username'];
			try {
				client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid).removeRole("684361506271264778");
				SM = EmbedMsgbox('i', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + " Ï∞®Îã® Ìï¥Ï†úÏóê ÏÑ±Í≥µ!");
			} catch(e) {
				SM = EmbedMsgbox('X', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + "ÏùÄ(Îäî) Ï∞®Îã® Ìï¥Ï†úÎê† Ïàò ÏóÜÏùå.");
			}

			try {
				client.channels.get(cid).send(SM);
			} catch(e) {}
		}
		if(bid != 0 && client.channels.get(cid).guild.id == ÎÇ¥ÏÑúÎ≤Ñ) {
			var SM;
			var UN = client.users.find(user => user.id == bid)['username'];
			try {
				client.guilds.get(ÎÇ¥ÏÑúÎ≤Ñ).members.get(bid).removeRole("673797140962738225");
				SM = EmbedMsgbox('i', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + " Ï∞®Îã® Ìï¥Ï†úÏóê ÏÑ±Í≥µ!");
			} catch(e) {
				SM = EmbedMsgbox('X', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + "ÏùÄ(Îäî) Ï∞®Îã® Ìï¥Ï†úÎê† Ïàò ÏóÜÏùå.");
			}


			try {
				client.channels.get(cid).send(SM);
			} catch(e) {}
		}
	}
	else if(key && key.meta) {
		var bid = 0;

		switch(key.name) {
		}

		if(client.channels.get(cid).guild.id == Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ && bid != 0) {
			// print(client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid));
			var SM;
			var UN = client.users.find(user => user.id == bid)['username'];
			try {
				const memberObj = client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid);

				client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid).addRole("684361506271264778");
				SM = EmbedMsgbox('!', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + " Ï∞®Îã®Ïóê ÏÑ±Í≥µ Î∞è 1Î†àÎ≤® ÎÇ¥Î†∏ÏùçÎãàÎã§.");

				var lvl = await fetchLevel(memberObj.user.id, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);
				lvl -= 1;
				const x = await setLevel(memberObj.user.id, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ, lvl);
			} catch(e) {
				SM = EmbedMsgbox('X', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + "ÏùÄ(Îäî) Ï∞®Îã®Îê† Ïàò ÏóÜÏùå");
			}

			/*
			setInterval(function() {
				client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(bid).removeRole("684361506271264778");
			}, 60000 * 15);
			*/
			try {
				client.channels.get(cid).send(SM);
			} catch(e) {}
		}

		if(client.channels.get(cid).guild.id == ÎÇ¥ÏÑúÎ≤Ñ && bid != 0) {
			var SM;
			var UN = client.users.find(user => user.id == bid)['username'];
			try {
				client.guilds.get(ÎÇ¥ÏÑúÎ≤Ñ).members.get(bid).addRole("673797140962738225");
				SM = EmbedMsgbox('!', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + " Ï∞®Îã®Ïóê ÏÑ±Í≥µ!");

				const memberObj = client.guilds.get('673797140962738225').members.get(bid);

				client.guilds.get('673797140962738225').members.get(bid).addRole("684361506271264778");
				SM = EmbedMsgbox('!', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + " Ï∞®Îã®Ïóê ÏÑ±Í≥µ Î∞è 7Î†àÎ≤® Îã§Ïö¥ÎêòÏóàÏùçÎãàÎã§!");

				var lvl = await fetchLevel(memberObj.user.id, '673797140962738225');
				lvl -= 5;
				const x = await setLevel(memberObj.user.id, '673797140962738225', lvl);
			} catch(e) {
				SM = EmbedMsgbox('X', "ÏÇ¨Ïö©Ïûê " + UN + " (" + String(bid) + ")" + "ÏùÄ(Îäî) Ï∞®Îã®Îê† Ïàò ÏóÜÏùå");
			}

			try {
				client.channels.get(cid).send(SM);
			} catch(e) {}
		}
	}
});

if(process.stdin.setRawMode) {
	process.stdin.setRawMode(1);
} else {
	tty.setRawMode(1);
}
process.stdin.resume();

var chkUserStatus = setInterval(async() => {
	if(connected) {
		/*if(["idle", 'dnd', 'offline'].includes(client.users.find(user => user.id == ÎÇ¥Í≥ÑÏ†ï).presence.status)) {
			client.guilds.find(guild => guild.id === ÎÇ¥ÏÑúÎ≤Ñ).me.setNickname(myUsername + ' (ÏûêÎèô ÏùëÎãµ Î™®Îìú)');
			client.guilds.find(guild => guild.id === Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).me.setNickname(myUsername + ' (ÏûêÎèô ÏùëÎãµ Î™®Îìú)');
		} else {
			client.guilds.find(guild => guild.id === ÎÇ¥ÏÑúÎ≤Ñ).me.setNickname(myUsername);
			client.guilds.find(guild => guild.id === Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).me.setNickname(myUsername);
		}*/

		const list = client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);

		list.members.forEach(async member => {
			var username = member.user.username;
			var userid = member.user.id;
			var bs = jsnUserStats[userid], cs = member.user.presence.status;

			var date = new Date();
			var min = date.getMinutes();
			min = (min < 10 ? "0" : "") + String(min);

			// if(client8.users.find(u => u.id == userid).typing.channel !== null) beep(1);

			if(typeof bs === 'undefined') {
				if(cs != 'offline') {
					jsnCustomStatus[userid] = getUserStatus(userid);

					switch(cs) {
						case 'online':
							cs = 'ÎåÄÌôî Í∞ÄÎä•Ìïú ÏÉÅÌÉú (' + jsnCustomStatus[userid] + ') ÏûÖ';

							if(!jsnDidMemberJoined[userid]) {
								addxp(member.user.id, member.guild.id, 1);
								/*
								var lvl = await fetchLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);
								lvl += (lowConnections.includes(username) ? 7 : 3);
								const x = await setLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ, lvl);

								var lvl2 = await fetchLevel(userid, ÎÇ¥ÏÑúÎ≤Ñ);
								lvl2 += (lowConnections.includes(username) ? 20 : 10);
								const x2 = await setLevel(userid, ÎÇ¥ÏÑúÎ≤Ñ, lvl2);
								*/
							}
							jsnDidMemberJoined[userid] = true;
						break ; case 'idle':
							cs = "ÏûêÎ¶¨Î•º ÎπÑÏö¥ ÏÉÅÌÉú (" + jsnCustomStatus[userid] + ") ÏûÖ";
						break ; case 'dnd':
							cs = "Îã§Î•∏ Ïö©Î¨¥ Ï§ë (" + jsnCustomStatus[userid] + ") ÏûÖ"
						break ; case 'offline':
							cs = "Ï†ëÏÜçÌïòÏßÄ ÏïäÏïòÏùç"
					}

					ism = ' '
					if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['mobile'] == 'online') {
						ism = ' (Î™®Î∞îÏùº) ';
					}
					else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['web'] == 'online') {
						ism = ' (Î∏åÎùºÏö∞Ï†Ä) ';
					}
					else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['desktop'] == 'online') {
						ism = ' (Îç∞Ïä§ÌÅ¨ÌÜ±) ';
					}

					print("[[" + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÎäî" + ism + cs + "ÎãàÎã§]]");

					// activateInput();
				}
			} else {
				var oldcs = '';
				if(jsnCustomStatus[userid] && jsnCustomStatus[userid] != getUserStatus(userid)) {
					if(jsnCustomStatus[userid] != '-' && getUserStatus(userid) == '-' && cs == 'offline') {
						oldcs = jsnCustomStatus[userid];
					}
					jsnCustomStatus[userid] = getUserStatus(userid);
					print(`\n[[${username} ÏßÅÏ†ëÏÑ§Ï†ï ÏÉÅÌÉúÍ∞Ä (${jsnCustomStatus[userid]}) Î≥ÄÍ≤ΩÎêêÏùçÎãàÎã§]]`);
					sound('750,100 500,150 750,100');

					if(jsnCustomStatus[userid] != '-') {
						translate(jsnCustomStatus[userid], {to: 'ko'}).then(res => {
							if(res.from.language.iso != 'ko')
								1; // client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(`${username}Ïùò ${res.from.language.iso} Ïñ∏Ïñ¥Î°ú Í∞êÏßÄÎêú ÏÉÅÌÉúÏùò Î≤àÏó≠Î≥∏ÏùÄ "${res.text}"ÏûÖÎãàÎã§.`);
						}).catch(err => {
							console.error(err);
						});
					}

					activateInput();
				} else {
					jsnCustomStatus[userid] = getUserStatus(userid);
				}

				if(bs != cs) {/*
					if(cs == 'online' && (userid == ÎÇ¥Í≥ÑÏ†ï)) {
						var sndm = "[ÏûêÎèôÎ∞úÏã†] <@" + userid + ">, ÎãπÏã†Ïù¥ Î∂ÄÏû¨Ï§ëÏù∏ ÎèôÏïà Îì±Ïû•Ìïú ÎèÑÎ∞∞Ïùò Ïã†ÏùÄ ";

						for(var md of dios) {
							if(typeof(md[0]) == 'undefined') continue;
							sndm += md[0] + "(" + md[1] + " Îã®Ïñ¥ " + String(md[2]) + "Ìöå) ";
						}


						// print(sndm + " ÏûÖÎãàÎã§")
						if(dl.length)
							client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(sndm + " ÏûÖÎãàÎã§");

						dios = [[]];
						dl = [];
					}*/

					if(cs == 'online') {
						if(!jsnDidMemberJoined[userid]) {
							var lvl = await fetchLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);
							lvl += (lowConnections.includes(username) ? 2 : 1);
							const x = await setLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ, lvl);

							var lvl2 = await fetchLevel(userid, ÎÇ¥ÏÑúÎ≤Ñ);
							lvl2 += (lowConnections.includes(username) ? 2 : 1);
							const x2 = await setLevel(userid, ÎÇ¥ÏÑúÎ≤Ñ, lvl2);
						}

						jsnDidMemberJoined[userid] = true;
					}

					if(cs == 'offline') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÇòÍ∞îÏùçÎãàÎã§]]");

						activateInput();

						if(userid == ÎÇ¥Í≥ÑÏ†ï) {
							// client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send("[ÏûêÎèôÎ∞úÏã†] ÏïàÎÖï");
						}
						/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('1200,100 700,150');
							} else {
								sound('750,100 500,150');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(1);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(3);
							}
						}

						// ÎìúÎîîÏñ¥ Ïù¥ Í∑úÏ†ï ÏóÜÏñ¥Ï°åÎî∞!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *****
						/*
						if(bs == 'online' && !jsnIsMemberMobile[userid]) {
							if(! [].includes(userid)) {
								var deactivate = 0;
								if(!jsnLastMessage[userid]) deactivate = 1;
								for(var keyword of ['„ÖÇ„Öá', '„Öá„Ñ∑', '„ÖÖ„Öá', 'Ïö¥Îèô', 'ÏÉ§Ïõå', 'ÌïôÏõê', 'ÎÇòÍ∞ê', 'ÎÇòÍ∞à', 'Ïò§ÌîÑÎùºÏù∏', 'ÏàôÏ†ú', 'Îπ†Ïù¥', 'Î∞îÏù¥', 'Ìï†Ïùº', 'Ìï† Ïùº', 'bye', 'Bye', "BYE", '„ÖÇ', '„ÖÇ„ÖÇ', '„ÖÉ', 'ÏûòÍ≤å', 'Ïûò Í≤å', 'ÏûîÎã§', 'Ïù¥Îî∞']) {
									try {
										if(jsnLastMessage[userid].replace(/\s/g, '').includes(keyword)) deactivate = true;
									} catch(e) {
										deactivate = true;
									}
								}

								// ÏÉÅÌÉú ÌôïÏù∏ //
								const lst = client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);

								var ocnt = 0;

								lst.members.forEach(function(member) {
									var username = member.user.username;
									var bs = jsnUserStats[userid], cs = member.user.presence.status;	

									if(member.user.id != userid) {
										if(cs == 'online') ocnt++;
									}
								});

								if(!ocnt) {
									deactivate = true;
								}
								
								// Ïù¥Ïä§ÌÑ∞ ÏóêÍ∑∏
								if((Math.random() * 10 < 1) && deactivate) {
									client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(EmbedMsgbox("!", "<@" + userid + ">ÎãòÍªòÏÑú Í∑∏ÎÉ• ÎÇòÍ∞îÏùçÎãàÎã§. " + (userid == Î∏îÎ£® ? '1,957ÎÖÑ(1,028,599,200Î∂Ñ)' : '7,777ÎÖÑ(4,087,591,200Î∂Ñ)') + " ÏïàÏóê Îã§Ïãú Îì§Ïñ¥ÏôÄÏ£ºÏã≠ÏãúÏò§. [[Ïò§ÏûëÎèô Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
									
									var ttc  = (userid == Î∏îÎ£® ? 61715952000 : 245255472000);
									var prpt = '';
									
									var template = (m, s, p) => m + ' ' + (s < 0 ? 0 : (Math.floor(s) == s ? (s + '.0') : s)) + 'Ï¥à ÎÇ®ÏïòÏäµÎãàÎã§... ' + p;
									
									client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(template(prpt, ttc, progress(0))).then(message => {
										var tv = 0, ts = ttc;
										jsnUserTimeout3[userid] = setInterval(() => {
											if(ts <= 0) {
												clearInterval(jsnUserTimeout3[userid]);
											} else {
												message.edit(template(prpt, ts -= 1.5, progress(tv += ((1.5 / ttc) * 100))));
											}
										}, 1500);
									});
								}

								if(!deactivate && oldcs == '' && !client.users.find(u => u.id == userid).bot) {
									client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(EmbedMsgbox("!", "<@" + userid + ">ÎãòÍªòÏÑú Í∑∏ÎÉ• ÎÇòÍ∞îÏùçÎãàÎã§. 10Î∂Ñ ÏïàÏóê Î≥µÍ∑ÄÌïòÏó¨Ï£ºÏã≠ÏãúÏò§. ÎòêÌïú 5Î†àÎ≤® ÎÇ¥Î¶ΩÎãàÎã§. [[Ïò§ÏûëÎèô Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
									jsnUserTimeout[userid] = setTimeout(async () => {
										client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send("[ÏûêÎèôÎ∞úÏã†] <@" + userid + "> Ï∞®Îã® 1Î∂Ñ Ï†Ñ...");
										jsnUserTimeout2[userid] = setTimeout(async () => {
											var lvl = await fetchLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ);
											lvl -= 5;
											const x = await setLevel(userid, Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ, lvl);

											client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(EmbedMsgbox("I", "<@" + userid + ">Ïù¥ Ï∞®Îã®ÎêòÏóàÏúºÎ©∞ Ï∞®ÏÜåÍ≤åÏóêÏÑú ÏöîÏ≤≠ÏùÑ ÌïòÏã≠ÏãúÏò§. [[Ïò§Ï∞®Îã® Ïã†Í≥†]](https://discord.gg/626yR28KGs)"));
											client.guilds.get(Ïö∞Î¶¨ÌåÄÏÑúÎ≤Ñ).members.get(userid).addRole("684361506271264778");
										}, 60000 * 1);
									}, 60000 * 9);
									
									var ttc  = 600;
									var prpt = '';
									
									var template = (m, s, p) => m + ' ' + (s < 0 ? 0 : (Math.floor(s) == s ? (s + '.0') : s)) + 'Ï¥à ÎÇ®ÏïòÏäµÎãàÎã§... ' + p;
									
									client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(template(prpt, ttc, progress(0))).then(message => {
										var tv = 0, ts = ttc;
										jsnUserTimeout3[userid] = setInterval(() => {
											if(ts <= 0) {
												clearInterval(jsnUserTimeout3[userid]);
											} else {
												message.edit(template(prpt, ts -= 1.5, progress(tv += ((1.5 / ttc) * 100))));
											}
										}, 1500);
									});
								} else {
//									if(oldcs != '' && !nostat[userid]) client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(`[ÏûêÎèôÎ∞úÏã†] ${username} ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÌÉúÎäî "${oldcs}"ÏûÖÎãàÎã§.\n\nÏÉÅÌÉú ÏïåÎ¶º Í±∞Î∂Ä: ` + '`!nostat`');
								}
							} else {
//								if(oldcs != '' && !nostat[userid]) client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(`[ÏûêÎèôÎ∞úÏã†] ${username} ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÌÉúÎäî "${oldcs}"ÏûÖÎãàÎã§.\n\nÏÉÅÌÉú ÏïåÎ¶º Í±∞Î∂Ä: ` + '`!nostat`');
							}
						} else {
//							if(oldcs != '' && !nostat[userid]) client.channels.get(TM_ÏûêÏú†_ÎåÄÌôî).send(`[ÏûêÎèôÎ∞úÏã†] ${username} ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÌÉúÎäî "${oldcs}"ÏûÖÎãàÎã§.\n\nÏÉÅÌÉú ÏïåÎ¶º Í±∞Î∂Ä: ` + '`!nostat`');
						}
						*/
					}
					else if(bs == 'offline' && cs == 'online') {
						ism = ' ';
						jsnIsMemberMobile[userid] = false;
						if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['mobile'] == 'online') {
							ism = ' (Î™®Î∞îÏùº) ';
							jsnIsMemberMobile[userid] = true;
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['web'] == 'online') {
							ism = ' (Î∏åÎùºÏö∞Ï†Ä) ';
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['desktop'] == 'online') {
							ism = ' (Îç∞Ïä§ÌÅ¨ÌÜ±) ';
						}

						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä" + ism + "Îì§Ïñ¥ÏôîÏùçÎãàÎã§]]");

						activateInput();
/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('700,150 1200,100');
							} else {
								sound('500,100 750,150');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(2);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(1);
							}
						}

						clearTimeout(jsnUserTimeout[userid]);
						clearTimeout(jsnUserTimeout2[userid]);
						clearInterval(jsnUserTimeout3[userid]);
					}
					else if(bs == 'offline' && cs == 'dnd') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä Ïó∞Í≤∞ÌñàÏßÄÎßå Îã§Î•∏ Ïö©Î¨¥Ï§ëÏûÖÎãàÎã§]]");

						activateInput();

						if(!noNotification.includes(username)) {
							beep(1); setTimeout(() => beep(1), 650);
						}
					}
					else if(cs == 'dnd') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä Îã§Î•∏ Ïö©Î¨¥Î•º ÏãúÏûëÌñàÏùçÎãàÎã§]]");

						activateInput();
/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('1200,100 700,150');
							} else {
								sound('750,100 500,150');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(1);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(3);
							}
						}
					}
					else if(bs == 'dnd' && cs == 'online') {
						ism = ' '
						if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['mobile'] == 'online') {
							ism = ' (Î™®Î∞îÏùº) ';
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['web'] == 'online') {
							ism = ' (Î∏åÎùºÏö∞Ï†Ä) ';
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['desktop'] == 'online') {
							ism = ' (Îç∞Ïä§ÌÅ¨ÌÜ±) ';
						}

						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä" + ism + "Ìï† ÏùºÏùÑ ÎÅùÎÇ¥Í≥† Î≥µÍ∑ÄÌñàÏùçÎãàÎã§]]");

						activateInput();
/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('700,150 1200,100');
							} else {
								sound('500,150 750,100');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(2);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(1);
							}
						}
					}
					else if(bs == 'idle' && cs == 'online') {
						ism = ' '
						if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['mobile'] == 'online') {
							ism = ' (Î™®Î∞îÏùº) ';
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['web'] == 'online') {
							ism = ' (Î∏åÎùºÏö∞Ï†Ä) ';
						}
						else if(client.users.find(user => user.id == userid).presence['clientStatus'] && client.users.find(user => user.id == userid).presence['clientStatus']['desktop'] == 'online') {
							ism = ' (Îç∞Ïä§ÌÅ¨ÌÜ±) ';
						}


						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä" + ism + "Î≥µÍ∑ÄÌñàÏùçÎãàÎã§]]");

						activateInput();
/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('700,150 1200,100');
							} else {
								sound('500,150 750,100');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(2);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(1);
							}
						}
					}
					else if(bs == 'online' && cs == 'idle') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûêÎ¶¨Î•º ÎπÑÏõ†ÏùçÎãàÎã§]]");

						activateInput();
/*
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								sound('1200,100 700,150');
							} else {
								sound('750,100 500,150');
							}
						}*/
						if(!noNotification.includes(username)) {
							if(lowConnections.includes(username)) {
								beep(1);
								setTimeout(function() {
									beep(2);
								}, 650);
							} else {
								beep(3);
							}
						}
					}
					else if(bs == 'offline' && cs == 'idle') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä Îì§Ïñ¥ÏôîÏßÄÎßå ÏûêÎ¶¨Î•º ÎπÑÏõ†ÏùçÎãàÎã§]]");

						activateInput();

						if(!noNotification.includes(username)) {
							beep(1); setTimeout(() => beep(1), 650);
						}
					}
					else if(bs == 'dnd' && cs == 'idle') {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä Ïö©Î¨¥Î•º ÎÅùÎÉàÏúºÎÇò Ïâ¨Í≥† ÏûàÎäîÏßÄ ÏûêÎ¶¨Î•º ÎπÑÏõ†ÏùçÎãàÎã§]]");

						activateInput();

						if(!noNotification.includes(username)) {
							beep(1); setTimeout(() => beep(1), 650);
						}
					}
					else {
						print("\n[[" + min + "Î∂ÑÏóê " + username + " (" + userid + ")" + " ÏÇ¨Ïö©ÏûêÍ∞Ä " + bs + "ÏòÄÏßÄÎßå Ïù¥Ï†ú " + cs + "ÏÉÅÌÉúÏûÖÎãàÎã§]]");

						activateInput();

						if(!noNotification.includes(username)) {
							beep(1); setTimeout(() => beep(1), 650);
						}
					}

					activateInput();
				}
			}

			jsnUserStats[userid] = member.user.presence.status;
		});
	}
}, 1500);
